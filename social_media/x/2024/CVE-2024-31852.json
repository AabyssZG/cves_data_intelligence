[
    {
        "cve": "CVE-2024-31852",
        "created_datetime": "2024-04-06T23:40:50",
        "author_id": "56137298",
        "data_id": "1776756986174230803",
        "reposts": 1,
        "post": "rt @xvonfers: wow...\n(cve-2024-31852)[clang][arm]wrong assembly code generation. branching to the corrupted \"lr\".\nhttps://t.co/67p2us79lg\nh\u2026",
        "audience": 579,
        "audience_total": 579,
        "total_reposts": 1,
        "post_count": 0,
        "author": "eno \uea00",
        "username": "en0x0",
        "v_score": null,
        "e_score": null,
        "base_score": null,
        "description": "LLVM BEFORE 18.1.3 GENERATES CODE IN WHICH THE LR REGISTER CAN BE OVERWRITTEN WITHOUT DATA BEING SAVED TO THE STACK, AND THUS THERE CAN SOMETIMES BE AN EXPLOITABLE ERROR IN THE FLOW OF CONTROL. THIS AFFECTS THE ARM BACKEND AND CAN BE DEMONSTRATED WITH CLANG. NOTE: THE VENDOR PERSPECTIVE IS WE DONT HAVE STRONG OBJECTIONS FOR A CVE TO BE CREATED ... IT DOES SEEM THAT THE LIKELIHOOD OF THIS MISCOMPILE ENABLING AN EXPLOIT REMAINS VERY LOW, BECAUSE THE MISCOMPILE RESULTING IN THIS JOP GADGET IS SUCH THAT THE FUNCTION IS MOST LIKELY TO CRASH ON MOST VALID INPUTS TO THE FUNCTION. SO, IF THIS FUNCTION IS COVERED BY ANY TESTING, THE MISCOMPILE IS MOST LIKELY TO BE DISCOVERED BEFORE THE BINARY IS SHIPPED TO PRODUCTION.",
        "last_modified_datetime": "2024-04-05 15:15:00",
        "published_datetime": "2024-04-05 15:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    }
]
[
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-09T17:08:15",
        "author_id": "T2_I8I0B",
        "data_id": "1BZXEN6",
        "reposts": 97,
        "post": "security advisory for the standard library (cve-2024-24576)",
        "audience": 8015,
        "audience_total": 60102,
        "total_reposts": 111,
        "post_count": 1,
        "author": "pietroalbini",
        "username": "t3_1bzxen6",
        "v_score": 0.495041,
        "e_score": null,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-09 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "reddit"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-09T19:52:22",
        "author_id": "202304802",
        "data_id": "1777786652942889459",
        "reposts": 1,
        "post": "rt @dinosn: cve-2024-24576 (cvss 10): rust flaw exposes windows systems to command injection attacks https://t.co/sqrkumvoqv",
        "audience": 127,
        "audience_total": 193701,
        "total_reposts": 117,
        "post_count": 1,
        "author": "karel von barel",
        "username": "karelvonbarel",
        "v_score": 0.495041,
        "e_score": null,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-09 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-09T22:11:35",
        "author_id": "1091099604744105990",
        "data_id": "1777821687469289555",
        "reposts": 1,
        "post": "rt @dinosn: cve-2024-24576 (cvss 10): rust flaw exposes windows systems to command injection attacks https://t.co/sqrkumvoqv",
        "audience": 88,
        "audience_total": 193701,
        "total_reposts": 117,
        "post_count": 1,
        "author": "cog",
        "username": "jason_dfir",
        "v_score": 0.495041,
        "e_score": null,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-09 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-09T20:36:57",
        "author_id": "3365726128",
        "data_id": "1777797872307552305",
        "reposts": 1,
        "post": "rt @dinosn: cve-2024-24576 (cvss 10): rust flaw exposes windows systems to command injection attacks https://t.co/sqrkumvoqv",
        "audience": 54,
        "audience_total": 193701,
        "total_reposts": 117,
        "post_count": 1,
        "author": "liuliu chacha",
        "username": "chitalilu",
        "v_score": 0.495041,
        "e_score": null,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-09 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-09T22:14:10",
        "author_id": "3308346623",
        "data_id": "1777822337594786056",
        "reposts": 1,
        "post": "rt @dinosn: cve-2024-24576 (cvss 10): rust flaw exposes windows systems to command injection attacks https://t.co/sqrkumvoqv",
        "audience": 642,
        "audience_total": 193701,
        "total_reposts": 117,
        "post_count": 1,
        "author": "infosec matters \ud83c\uddfa\ud83c\udde6\ud83c\udf3b",
        "username": "infosecmatters",
        "v_score": 0.495041,
        "e_score": null,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-09 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T01:24:02",
        "author_id": "3936464712",
        "data_id": "1777870121379545427",
        "reposts": 1,
        "post": "rt @dinosn: cve-2024-24576 (cvss 10): rust flaw exposes windows systems to command injection attacks https://t.co/sqrkumvoqv",
        "audience": 71,
        "audience_total": 193701,
        "total_reposts": 117,
        "post_count": 1,
        "author": "ss",
        "username": "norisvello",
        "v_score": 0.495041,
        "e_score": null,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-09 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": "https://abs.twimg.com/sticky/default_profile_images/default_profile_normal.png",
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T02:07:38",
        "author_id": "4883012718",
        "data_id": "1777881091229311138",
        "reposts": 1,
        "post": "rt @linda_pp: rust \u306e command \u306b\u898b\u3064\u304b\u3063\u305f\u30af\u30ea\u30c6\u30a3\u30ab\u30eb\u306a\u8106\u5f31\u6027(cve-2024-24576) \u306b\u3064\u3044\u3066\u306f\u5831\u544a\u8005\u304c\u4e01\u5be7\u306a\u89e3\u8aac\u3092\u66f8\u3044\u3066\u304f\u308c\u3066\u308b\uff0ecmd.exe \u306e\u5f15\u6570\u306e\u30af\u30a9\u30fc\u30c8\u306f\u96e3\u3057\u304f\u3066\u6642\u306b\u306f\u4e0d\u53ef\u80fd\u3068\u3044\u3046\u8a71\uff0e\"%var%\" \u3067 var \u304c\u30c0\u30d6\u30eb\u30af\u30a9\u30fc\u30c8\u2026",
        "audience": 2611,
        "audience_total": 193701,
        "total_reposts": 117,
        "post_count": 1,
        "author": "\u30de\u30ec\u30a4\u30f3\u3055\u3093\u26c4\ufe0f\u3055\u3093\u3068\u4ed61000 \u4eba",
        "username": "maleicacid_towa",
        "v_score": 0.495041,
        "e_score": null,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-09 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T02:11:36",
        "author_id": "9310282",
        "data_id": "1777882092476768346",
        "reposts": 1,
        "post": "rt @linda_pp: rust \u306e command \u306b\u898b\u3064\u304b\u3063\u305f\u30af\u30ea\u30c6\u30a3\u30ab\u30eb\u306a\u8106\u5f31\u6027(cve-2024-24576) \u306b\u3064\u3044\u3066\u306f\u5831\u544a\u8005\u304c\u4e01\u5be7\u306a\u89e3\u8aac\u3092\u66f8\u3044\u3066\u304f\u308c\u3066\u308b\uff0ecmd.exe \u306e\u5f15\u6570\u306e\u30af\u30a9\u30fc\u30c8\u306f\u96e3\u3057\u304f\u3066\u6642\u306b\u306f\u4e0d\u53ef\u80fd\u3068\u3044\u3046\u8a71\uff0e\"%var%\" \u3067 var \u304c\u30c0\u30d6\u30eb\u30af\u30a9\u30fc\u30c8\u2026",
        "audience": 2164,
        "audience_total": 194981,
        "total_reposts": 123,
        "post_count": 1,
        "author": "\u6bba\u610f\u99c6\u52d5\u958b\u767a",
        "username": "toru_inoue",
        "v_score": 0.495041,
        "e_score": null,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-09 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T02:11:56",
        "author_id": "854671794543788032",
        "data_id": "1777882173699481825",
        "reposts": 1,
        "post": "rt @linda_pp: rust \u306e command \u306b\u898b\u3064\u304b\u3063\u305f\u30af\u30ea\u30c6\u30a3\u30ab\u30eb\u306a\u8106\u5f31\u6027(cve-2024-24576) \u306b\u3064\u3044\u3066\u306f\u5831\u544a\u8005\u304c\u4e01\u5be7\u306a\u89e3\u8aac\u3092\u66f8\u3044\u3066\u304f\u308c\u3066\u308b\uff0ecmd.exe \u306e\u5f15\u6570\u306e\u30af\u30a9\u30fc\u30c8\u306f\u96e3\u3057\u304f\u3066\u6642\u306b\u306f\u4e0d\u53ef\u80fd\u3068\u3044\u3046\u8a71\uff0e\"%var%\" \u3067 var \u304c\u30c0\u30d6\u30eb\u30af\u30a9\u30fc\u30c8\u2026",
        "audience": 1153,
        "audience_total": 194981,
        "total_reposts": 123,
        "post_count": 1,
        "author": "su10@\u30cf\u30a4\u30d1\u30fc\u30ab\u30b8\u30e5\u30a2\u30eb\u30b2\u30fc\u30e0\u958b\u767a",
        "username": "su10_dev",
        "v_score": 0.495041,
        "e_score": null,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-09 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T02:52:05",
        "author_id": "11049032",
        "data_id": "1777892278490829042",
        "reposts": 1,
        "post": "rt @linda_pp: rust \u306e command \u306b\u898b\u3064\u304b\u3063\u305f\u30af\u30ea\u30c6\u30a3\u30ab\u30eb\u306a\u8106\u5f31\u6027(cve-2024-24576) \u306b\u3064\u3044\u3066\u306f\u5831\u544a\u8005\u304c\u4e01\u5be7\u306a\u89e3\u8aac\u3092\u66f8\u3044\u3066\u304f\u308c\u3066\u308b\uff0ecmd.exe \u306e\u5f15\u6570\u306e\u30af\u30a9\u30fc\u30c8\u306f\u96e3\u3057\u304f\u3066\u6642\u306b\u306f\u4e0d\u53ef\u80fd\u3068\u3044\u3046\u8a71\uff0e\"%var%\" \u3067 var \u304c\u30c0\u30d6\u30eb\u30af\u30a9\u30fc\u30c8\u2026",
        "audience": 499,
        "audience_total": 194981,
        "total_reposts": 123,
        "post_count": 1,
        "author": "oyapiro",
        "username": "oyapiro",
        "v_score": 0.495041,
        "e_score": null,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-09 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T03:40:17",
        "author_id": "14367597",
        "data_id": "1777904407515910573",
        "reposts": 1,
        "post": "rt @thehackersnews: \u26a0\ufe0f attention developers: a severe #vulnerability (cve-2024-24576) in the rust standard library could lead to command in\u2026",
        "audience": 4342,
        "audience_total": 196878,
        "total_reposts": 128,
        "post_count": 1,
        "author": "imperial \ud83d\udc00",
        "username": "aimperial",
        "v_score": 0.495041,
        "e_score": null,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-09 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T02:58:58",
        "author_id": "1063652072875163648",
        "data_id": "1777894008775426425",
        "reposts": 1,
        "post": "rt @linda_pp: rust \u306e command \u306b\u898b\u3064\u304b\u3063\u305f\u30af\u30ea\u30c6\u30a3\u30ab\u30eb\u306a\u8106\u5f31\u6027(cve-2024-24576) \u306b\u3064\u3044\u3066\u306f\u5831\u544a\u8005\u304c\u4e01\u5be7\u306a\u89e3\u8aac\u3092\u66f8\u3044\u3066\u304f\u308c\u3066\u308b\uff0ecmd.exe \u306e\u5f15\u6570\u306e\u30af\u30a9\u30fc\u30c8\u306f\u96e3\u3057\u304f\u3066\u6642\u306b\u306f\u4e0d\u53ef\u80fd\u3068\u3044\u3046\u8a71\uff0e\"%var%\" \u3067 var \u304c\u30c0\u30d6\u30eb\u30af\u30a9\u30fc\u30c8\u2026",
        "audience": 1312,
        "audience_total": 196353,
        "total_reposts": 126,
        "post_count": 1,
        "author": "\u5f25\u751f\u3000\u6c34\u8449\ud835\udd4f",
        "username": "yayoi_mizuha",
        "v_score": 0.495041,
        "e_score": null,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-09 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T03:38:29",
        "author_id": "2179767302",
        "data_id": "1777903957232566761",
        "reposts": 1,
        "post": "rt @dinosn: cve-2024-24576 (cvss 10): rust flaw exposes windows systems to command injection attacks https://t.co/sqrkumvoqv",
        "audience": 586,
        "audience_total": 196353,
        "total_reposts": 126,
        "post_count": 1,
        "author": "chavda zeel",
        "username": "chavdazeel",
        "v_score": 0.495041,
        "e_score": null,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-09 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T03:41:08",
        "author_id": "318476835",
        "data_id": "1777904620460737006",
        "reposts": 1,
        "post": "rt @dinosn: cve-2024-24576 (cvss 10): rust flaw exposes windows systems to command injection attacks https://t.co/sqrkumvoqv",
        "audience": 276,
        "audience_total": 196878,
        "total_reposts": 128,
        "post_count": 1,
        "author": "andres r",
        "username": "lorduruz",
        "v_score": 0.495041,
        "e_score": null,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-09 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T03:42:01",
        "author_id": "1348560493422800897",
        "data_id": "1777904845430657419",
        "reposts": 1,
        "post": "rt @astrakernel: \ud83e\udeb2 rust- security advisory for the standard library (cve-2024-24576)\n\n\ud83d\udc49 did not properly escape arguments when invoking bat\u2026",
        "audience": 38162,
        "audience_total": 197484,
        "total_reposts": 130,
        "post_count": 1,
        "author": "oihec hackers",
        "username": "hackersoihec",
        "v_score": 0.495041,
        "e_score": null,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-09 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T04:37:01",
        "author_id": "1333652398070521857",
        "data_id": "1777918686201790875",
        "reposts": 1,
        "post": "rt @thehackersnews: \u26a0\ufe0f attention developers: a severe #vulnerability (cve-2024-24576) in the rust standard library could lead to command in\u2026",
        "audience": 397,
        "audience_total": 197484,
        "total_reposts": 130,
        "post_count": 1,
        "author": "renu-cert",
        "username": "renu_cert",
        "v_score": 0.495041,
        "e_score": null,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-09 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T05:13:58",
        "author_id": "135614493",
        "data_id": "1777927983778447799",
        "reposts": 1,
        "post": "rt @thehackersnews: \u26a0\ufe0f attention developers: a severe #vulnerability (cve-2024-24576) in the rust standard library could lead to command in\u2026",
        "audience": 921,
        "audience_total": 205623,
        "total_reposts": 133,
        "post_count": 1,
        "author": "h\ud835\udcear\ud835\udcf8\ud835\udcf8n",
        "username": "ghostdehunter",
        "v_score": 0.495041,
        "e_score": null,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-09 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T03:48:02",
        "author_id": "189400436",
        "data_id": "1777906358895124595",
        "reposts": 1,
        "post": "rt @linda_pp: rust \u306e command \u306b\u898b\u3064\u304b\u3063\u305f\u30af\u30ea\u30c6\u30a3\u30ab\u30eb\u306a\u8106\u5f31\u6027(cve-2024-24576) \u306b\u3064\u3044\u3066\u306f\u5831\u544a\u8005\u304c\u4e01\u5be7\u306a\u89e3\u8aac\u3092\u66f8\u3044\u3066\u304f\u308c\u3066\u308b\uff0ecmd.exe \u306e\u5f15\u6570\u306e\u30af\u30a9\u30fc\u30c8\u306f\u96e3\u3057\u304f\u3066\u6642\u306b\u306f\u4e0d\u53ef\u80fd\u3068\u3044\u3046\u8a71\uff0e\"%var%\" \u3067 var \u304c\u30c0\u30d6\u30eb\u30af\u30a9\u30fc\u30c8\u2026",
        "audience": 164,
        "audience_total": 197484,
        "total_reposts": 130,
        "post_count": 1,
        "author": "\u68ee\u306e\u304f\u307e\u3055\u3093\ud83d\udc30\ud83e\udd57\ud83c\udf53\ud83c\udf3e",
        "username": "kscc153w",
        "v_score": 0.495041,
        "e_score": null,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-09 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T05:17:41",
        "author_id": "17920532",
        "data_id": "1777928921553760617",
        "reposts": 1,
        "post": "rt @linda_pp: rust \u306e command \u306b\u898b\u3064\u304b\u3063\u305f\u30af\u30ea\u30c6\u30a3\u30ab\u30eb\u306a\u8106\u5f31\u6027(cve-2024-24576) \u306b\u3064\u3044\u3066\u306f\u5831\u544a\u8005\u304c\u4e01\u5be7\u306a\u89e3\u8aac\u3092\u66f8\u3044\u3066\u304f\u308c\u3066\u308b\uff0ecmd.exe \u306e\u5f15\u6570\u306e\u30af\u30a9\u30fc\u30c8\u306f\u96e3\u3057\u304f\u3066\u6642\u306b\u306f\u4e0d\u53ef\u80fd\u3068\u3044\u3046\u8a71\uff0e\"%var%\" \u3067 var \u304c\u30c0\u30d6\u30eb\u30af\u30a9\u30fc\u30c8\u2026",
        "audience": 160,
        "audience_total": 205623,
        "total_reposts": 133,
        "post_count": 1,
        "author": "\u304e\u3069\u306b\u3083\u3059",
        "username": "gidodongas",
        "v_score": 0.495041,
        "e_score": null,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-09 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T05:09:32",
        "author_id": "128484298",
        "data_id": "1777926869091840426",
        "reposts": 1,
        "post": "rt @filip_dragovic: i published my poc for cve-2023-36047 as msrc fixed the bypass today tracked as cve-2024-21447. with some modification\u2026",
        "audience": 120409,
        "audience_total": 205623,
        "total_reposts": 133,
        "post_count": 1,
        "author": "nicolas krassas",
        "username": "dinosn",
        "v_score": 0.495041,
        "e_score": null,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-09 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T05:10:59",
        "author_id": "1487817783266070532",
        "data_id": "1777927235296710981",
        "reposts": 1,
        "post": "rt @dinosn: cve-2024-24576 (cvss 10): rust flaw exposes windows systems to command injection attacks https://t.co/sqrkumvoqv",
        "audience": 11548,
        "audience_total": 205623,
        "total_reposts": 133,
        "post_count": 1,
        "author": "tentacleops \ud83c\udff4\u200d\u2620\ufe0f",
        "username": "cthulhu_answers",
        "v_score": 0.495041,
        "e_score": null,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-09 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T06:05:23",
        "author_id": "1216364139297353728",
        "data_id": "1777940923562741766",
        "reposts": 1,
        "post": "rt @astrakernel: \ud83e\udeb2 rust- security advisory for the standard library (cve-2024-24576)\n\n\ud83d\udc49 did not properly escape arguments when invoking bat\u2026",
        "audience": 71,
        "audience_total": 209385,
        "total_reposts": 135,
        "post_count": 2,
        "author": "follower",
        "username": "followe32604349",
        "v_score": 0.495041,
        "e_score": null,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-09 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T06:55:11",
        "author_id": "1267087698503913472",
        "data_id": "1777953458299019531",
        "reposts": 1,
        "post": "rt @dinosn: cve-2024-24576 (cvss 10): rust flaw exposes windows systems to command injection attacks https://t.co/sqrkumvoqv",
        "audience": 87,
        "audience_total": 212318,
        "total_reposts": 138,
        "post_count": 2,
        "author": "evans",
        "username": "3vedy",
        "v_score": 0.495041,
        "e_score": null,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-09 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T06:51:49",
        "author_id": "608112806",
        "data_id": "1777952608923398196",
        "reposts": 1,
        "post": "rt @thehackersnews: \u26a0\ufe0f attention developers: a severe #vulnerability (cve-2024-24576) in the rust standard library could lead to command in\u2026",
        "audience": 417,
        "audience_total": 212318,
        "total_reposts": 138,
        "post_count": 2,
        "author": "\u3068\u308a\u3053\u308d\u307c\u3063\u3061",
        "username": "madaodasu",
        "v_score": 0.495041,
        "e_score": null,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-09 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T06:50:06",
        "author_id": "754787478205263873",
        "data_id": "1777952178562281702",
        "reposts": 1,
        "post": "rt @youranonriots: \u26a0\ufe0f attention developers: a severe #vulnerability (cve-2024-24576) in the rust standard library could lead to command inj\u2026",
        "audience": 315,
        "audience_total": 210134,
        "total_reposts": 137,
        "post_count": 2,
        "author": "thor anon love",
        "username": "anon777thor",
        "v_score": 0.495041,
        "e_score": null,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-09 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T06:48:39",
        "author_id": "374436748",
        "data_id": "1777951811011313877",
        "reposts": 1,
        "post": "rt @astrakernel: \ud83e\udeb2 rust- security advisory for the standard library (cve-2024-24576)\n\n\ud83d\udc49 did not properly escape arguments when invoking bat\u2026",
        "audience": 114,
        "audience_total": 209385,
        "total_reposts": 135,
        "post_count": 2,
        "author": "miguel",
        "username": "nanomikel",
        "v_score": 0.495041,
        "e_score": null,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-09 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T06:56:44",
        "author_id": "183784606",
        "data_id": "1777953847115493514",
        "reposts": 1,
        "post": "rt @linda_pp: rust \u306e command \u306b\u898b\u3064\u304b\u3063\u305f\u30af\u30ea\u30c6\u30a3\u30ab\u30eb\u306a\u8106\u5f31\u6027(cve-2024-24576) \u306b\u3064\u3044\u3066\u306f\u5831\u544a\u8005\u304c\u4e01\u5be7\u306a\u89e3\u8aac\u3092\u66f8\u3044\u3066\u304f\u308c\u3066\u308b\uff0ecmd.exe \u306e\u5f15\u6570\u306e\u30af\u30a9\u30fc\u30c8\u306f\u96e3\u3057\u304f\u3066\u6642\u306b\u306f\u4e0d\u53ef\u80fd\u3068\u3044\u3046\u8a71\uff0e\"%var%\" \u3067 var \u304c\u30c0\u30d6\u30eb\u30af\u30a9\u30fc\u30c8\u2026",
        "audience": 276,
        "audience_total": 212318,
        "total_reposts": 138,
        "post_count": 2,
        "author": "'(\ud807\udf07\u001b\u6a61\u001b)",
        "username": "criticabug",
        "v_score": 0.495041,
        "e_score": null,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-09 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T07:42:43",
        "author_id": "1720364734447329280",
        "data_id": "1777965418855923933",
        "reposts": 1,
        "post": "rt @thehackersnews: \u26a0\ufe0f attention developers: a severe #vulnerability (cve-2024-24576) in the rust standard library could lead to command in\u2026",
        "audience": 133,
        "audience_total": 217809,
        "total_reposts": 143,
        "post_count": 2,
        "author": "brunoshi.eth",
        "username": "brunoshi_",
        "v_score": 0.495041,
        "e_score": null,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-09 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T06:58:50",
        "author_id": "437351026",
        "data_id": "1777954376016974100",
        "reposts": 1,
        "post": "rt @thehackersnews: \u26a0\ufe0f attention developers: a severe #vulnerability (cve-2024-24576) in the rust standard library could lead to command in\u2026",
        "audience": 1144,
        "audience_total": 214445,
        "total_reposts": 141,
        "post_count": 2,
        "author": "richard s.",
        "username": "richard_s81",
        "v_score": 0.495041,
        "e_score": null,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-09 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": "https://pbs.twimg.com/profile_images/1640265950648836096/hPv32Qpr_normal.jpg",
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T07:40:00",
        "author_id": "1677172823754944517",
        "data_id": "1777964736828882974",
        "reposts": 1,
        "post": "rt @rustdiscussions: security advisory for the standard library (cve-2024-24576)\n\nhttps://t.co/taabjgx9os\n\ndiscussions: https://t.co/zrefrp\u2026",
        "audience": 95,
        "audience_total": 214445,
        "total_reposts": 141,
        "post_count": 2,
        "author": "paul saunders",
        "username": "coruscateor",
        "v_score": 0.495041,
        "e_score": null,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-09 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T09:17:53",
        "author_id": "1348049884545429506",
        "data_id": "1777989368205967510",
        "reposts": 1,
        "post": "rt @dinosn: cve-2024-24576 (cvss 10): rust flaw exposes windows systems to command injection attacks https://t.co/sqrkumvoqv",
        "audience": 385,
        "audience_total": 217837,
        "total_reposts": 144,
        "post_count": 2,
        "author": "hacking y mas",
        "username": "hackingymas",
        "v_score": 0.495041,
        "e_score": null,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-09 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T08:28:54",
        "author_id": "936607433379729408",
        "data_id": "1777977043122004474",
        "reposts": 1,
        "post": "rt @rustjobs_dev: rust 1.77.2 has been released\n\nthis release includes a fix for cve-2024-24576.\n\nrun `rustup update stable` to upgrade!\n\nf\u2026",
        "audience": 140,
        "audience_total": 217837,
        "total_reposts": 144,
        "post_count": 2,
        "author": "sunny singh",
        "username": "sunnysi02181322",
        "v_score": 0.495041,
        "e_score": null,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-09 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T10:06:50",
        "author_id": "893907413446873088",
        "data_id": "1778001685266194517",
        "reposts": 1,
        "post": "rt @rustjobs_dev: rust 1.77.2 has been released\n\nthis release includes a fix for cve-2024-24576.\n\nrun `rustup update stable` to upgrade!\n\nf\u2026",
        "audience": 100,
        "audience_total": 221733,
        "total_reposts": 146,
        "post_count": 2,
        "author": "me.lnk",
        "username": "m_siarhei",
        "v_score": 0.495041,
        "e_score": null,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-09 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T09:21:04",
        "author_id": "1559716358295789572",
        "data_id": "1777990171205472731",
        "reposts": 1,
        "post": "rt @glitch_9999: (\u0627\u0644\u062a\u064a \u0639\u0627\u062f\u0629 \u0645\u0627 \u062a\u0646\u0641\u0630 \u0628\u0631\u0627\u0645\u062c \u0645\u0639\u064a\u0646\u0629) \u0639\u0646\u062f \u0627\u0633\u062a\u062e\u062f\u0627\u0645\u0647\u0627 \u0639\u0644\u0649 \u0648\u064a\u0646\u062f\u0648\u0632.\n\n\u0647\u0630\u0647 \u0627\u0644\u062b\u063a\u0631\u0629\u060c \u0648\u0627\u0644\u062a\u064a \u062a\u062d\u0645\u0644 \u0627\u0644\u0631\u0642\u0645 cve-2024-24576\u060c \u062d\u0635\u0644\u062a \u0639\u0644\u0649 \u062a\u0635\u0646\u064a\u0641 \u062e\u0637\u0648\u2026",
        "audience": 506,
        "audience_total": 221733,
        "total_reposts": 146,
        "post_count": 2,
        "author": "cyber security\ud83e\uddd1\u200d\ud83d\udcbbrayaan\u0627\u0644\u0641\u064a\u062d\u0627\u0648\u064a",
        "username": "rayaan2040",
        "v_score": 0.495041,
        "e_score": null,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-09 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T10:09:18",
        "author_id": "142760112",
        "data_id": "1778002309127283025",
        "reposts": 1,
        "post": "rt @linda_pp: rust \u306e command \u306b\u898b\u3064\u304b\u3063\u305f\u30af\u30ea\u30c6\u30a3\u30ab\u30eb\u306a\u8106\u5f31\u6027(cve-2024-24576) \u306b\u3064\u3044\u3066\u306f\u5831\u544a\u8005\u304c\u4e01\u5be7\u306a\u89e3\u8aac\u3092\u66f8\u3044\u3066\u304f\u308c\u3066\u308b\uff0ecmd.exe \u306e\u5f15\u6570\u306e\u30af\u30a9\u30fc\u30c8\u306f\u96e3\u3057\u304f\u3066\u6642\u306b\u306f\u4e0d\u53ef\u80fd\u3068\u3044\u3046\u8a71\uff0e\"%var%\" \u3067 var \u304c\u30c0\u30d6\u30eb\u30af\u30a9\u30fc\u30c8\u2026",
        "audience": 6264,
        "audience_total": 225247,
        "total_reposts": 148,
        "post_count": 2,
        "author": "ladysmoker",
        "username": "lady_smoker_",
        "v_score": 0.495041,
        "e_score": null,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-09 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T10:50:12",
        "author_id": "1265678896856363009",
        "data_id": "1778012599852097730",
        "reposts": 1,
        "post": "rt @thehackersnews: \u26a0\ufe0f attention developers: a severe #vulnerability (cve-2024-24576) in the rust standard library could lead to command in\u2026",
        "audience": 301,
        "audience_total": 225247,
        "total_reposts": 148,
        "post_count": 2,
        "author": "assaulttomcat",
        "username": "assaulttomcat",
        "v_score": 0.495041,
        "e_score": null,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-09 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T10:55:07",
        "author_id": "114549208",
        "data_id": "1778013836458533277",
        "reposts": 1,
        "post": "rt @thehackersnews: \u26a0\ufe0f attention developers: a severe #vulnerability (cve-2024-24576) in the rust standard library could lead to command in\u2026",
        "audience": 1574,
        "audience_total": 225247,
        "total_reposts": 148,
        "post_count": 2,
        "author": "angie de kleine \ud83c\uddf3\ud83c\uddf1\ud83c\uddea\ud83c\uddfa\ud83c\udde9\ud83c\uddea\ud83c\uddfa\ud83c\uddf8\ud83c\udde8\ud83c\udde6\ud83d\uddfd",
        "username": "adekleine",
        "v_score": 0.495041,
        "e_score": null,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-09 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T11:42:42",
        "author_id": "1715785549108129792",
        "data_id": "1778025813163614536",
        "reposts": 0,
        "post": "a critical rust vulnerability (cve-2024-24576) allows command injection on windows by bypassing argument escaping when invoking batch files with untrusted inputs. rust 1.77.2 fixes this critical flaw with a cvss score of 10/10 https://t.co/mgiodzpayr",
        "audience": 187,
        "audience_total": 225247,
        "total_reposts": 148,
        "post_count": 2,
        "author": "john peters:",
        "username": "johnpeters2456",
        "v_score": 0.495041,
        "e_score": null,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-09 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T10:57:26",
        "author_id": "1532373882153361408",
        "data_id": "1778014418766340106",
        "reposts": 1,
        "post": "rt @thehackersnews: \u26a0\ufe0f attention developers: a severe #vulnerability (cve-2024-24576) in the rust standard library could lead to command in\u2026",
        "audience": 200,
        "audience_total": 225247,
        "total_reposts": 148,
        "post_count": 2,
        "author": "plinio devanier",
        "username": "pdevanier",
        "v_score": 0.495041,
        "e_score": null,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-09 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T11:40:12",
        "author_id": "780418528633651200",
        "data_id": "1778025181933428746",
        "reposts": 1,
        "post": "rt @thehackersnews: \u26a0\ufe0f attention developers: a severe #vulnerability (cve-2024-24576) in the rust standard library could lead to command in\u2026",
        "audience": 3375,
        "audience_total": 225247,
        "total_reposts": 148,
        "post_count": 2,
        "author": "packetsniper",
        "username": "hacktoprotect",
        "v_score": 0.495041,
        "e_score": null,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-09 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T11:39:24",
        "author_id": "1715785549108129792",
        "data_id": "1778024981483422023",
        "reposts": 1,
        "post": "rt @thehackersnews: \u26a0\ufe0f attention developers: a severe #vulnerability (cve-2024-24576) in the rust standard library could lead to command in\u2026",
        "audience": 187,
        "audience_total": 225247,
        "total_reposts": 148,
        "post_count": 2,
        "author": "john peters:",
        "username": "johnpeters2456",
        "v_score": 0.495041,
        "e_score": null,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-09 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T11:45:06",
        "author_id": "72197274",
        "data_id": "1778026415910236465",
        "reposts": 1,
        "post": "rt @thehackersnews: \u26a0\ufe0f attention developers: a severe #vulnerability (cve-2024-24576) in the rust standard library could lead to command in\u2026",
        "audience": 437,
        "audience_total": 225247,
        "total_reposts": 148,
        "post_count": 2,
        "author": "charly towers",
        "username": "carlostorresj",
        "v_score": 0.495041,
        "e_score": null,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-09 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T12:30:29",
        "author_id": "426632760",
        "data_id": "1778037836933144735",
        "reposts": 1,
        "post": "rt @linda_pp: rust \u306e command \u306b\u898b\u3064\u304b\u3063\u305f\u30af\u30ea\u30c6\u30a3\u30ab\u30eb\u306a\u8106\u5f31\u6027(cve-2024-24576) \u306b\u3064\u3044\u3066\u306f\u5831\u544a\u8005\u304c\u4e01\u5be7\u306a\u89e3\u8aac\u3092\u66f8\u3044\u3066\u304f\u308c\u3066\u308b\uff0ecmd.exe \u306e\u5f15\u6570\u306e\u30af\u30a9\u30fc\u30c8\u306f\u96e3\u3057\u304f\u3066\u6642\u306b\u306f\u4e0d\u53ef\u80fd\u3068\u3044\u3046\u8a71\uff0e\"%var%\" \u3067 var \u304c\u30c0\u30d6\u30eb\u30af\u30a9\u30fc\u30c8\u2026",
        "audience": 312,
        "audience_total": 225247,
        "total_reposts": 148,
        "post_count": 2,
        "author": "(\uff65\u0e34\u03c9\uff65\u0e34)",
        "username": "taleofduckedon",
        "v_score": 0.495041,
        "e_score": null,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-09 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T13:20:22",
        "author_id": "14252145",
        "data_id": "1778050392795849172",
        "reposts": 1,
        "post": "rt @dinosn: cve-2024-24576 (cvss 10): rust flaw exposes windows systems to command injection attacks https://t.co/sqrkumvoqv",
        "audience": 2184,
        "audience_total": 230722,
        "total_reposts": 157,
        "post_count": 2,
        "author": "marius (wishi)",
        "username": "windsheep_",
        "v_score": 0.495041,
        "e_score": null,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-09 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T15:41:56",
        "author_id": "14373870",
        "data_id": "1778086016999629078",
        "reposts": 1,
        "post": "rt @linda_pp: rust \u306e command \u306b\u898b\u3064\u304b\u3063\u305f\u30af\u30ea\u30c6\u30a3\u30ab\u30eb\u306a\u8106\u5f31\u6027(cve-2024-24576) \u306b\u3064\u3044\u3066\u306f\u5831\u544a\u8005\u304c\u4e01\u5be7\u306a\u89e3\u8aac\u3092\u66f8\u3044\u3066\u304f\u308c\u3066\u308b\uff0ecmd.exe \u306e\u5f15\u6570\u306e\u30af\u30a9\u30fc\u30c8\u306f\u96e3\u3057\u304f\u3066\u6642\u306b\u306f\u4e0d\u53ef\u80fd\u3068\u3044\u3046\u8a71\uff0e\"%var%\" \u3067 var \u304c\u30c0\u30d6\u30eb\u30af\u30a9\u30fc\u30c8\u2026",
        "audience": 1418,
        "audience_total": 230722,
        "total_reposts": 157,
        "post_count": 2,
        "author": "itsango",
        "username": "itsango",
        "v_score": 0.495041,
        "e_score": null,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-09 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T16:27:02",
        "author_id": "14542307",
        "data_id": "1778097367847494026",
        "reposts": 1,
        "post": "rt @mattn_jp: cve-2024-24576 \u306f\u304b\u306a\u308a\u3067\u5371\u306a\u3044\u3084\u3064\u306a\u306e\u3067 windows \u3067 rust \u66f8\u3044\u3066\u308b\u4eba\u306f\u8981\u66f4\u65b0\u3060\u3088\u3002\u3042\u3068 rust \u3067\u30d3\u30eb\u30c9\u3055\u308c\u305f\u7269\u306f\u8fd1\u65e5\u4e2d\u306b\u66f4\u65b0\u304c\u51fa\u308b\u306f\u305a\u306a\u306e\u3067\u305d\u308c\u3082\u66f4\u65b0\u304c\u5fc5\u8981\u3060\u3088\u3002",
        "audience": 469,
        "audience_total": 230722,
        "total_reposts": 157,
        "post_count": 2,
        "author": "\u753b\u8cea\u306e\u8352\u3044\u30ac\u30eb\u30d1\u30f3\u304a\u3058\u3055\u3093",
        "username": "mix3",
        "v_score": 0.495041,
        "e_score": null,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-09 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T16:29:41",
        "author_id": "155806946",
        "data_id": "1778098032606908839",
        "reposts": 1,
        "post": "rt @mattn_jp: cve-2024-24576 \u306f\u304b\u306a\u308a\u3067\u5371\u306a\u3044\u3084\u3064\u306a\u306e\u3067 windows \u3067 rust \u66f8\u3044\u3066\u308b\u4eba\u306f\u8981\u66f4\u65b0\u3060\u3088\u3002\u3042\u3068 rust \u3067\u30d3\u30eb\u30c9\u3055\u308c\u305f\u7269\u306f\u8fd1\u65e5\u4e2d\u306b\u66f4\u65b0\u304c\u51fa\u308b\u306f\u305a\u306a\u306e\u3067\u305d\u308c\u3082\u66f4\u65b0\u304c\u5fc5\u8981\u3060\u3088\u3002",
        "audience": 240,
        "audience_total": 233103,
        "total_reposts": 160,
        "post_count": 2,
        "author": "\u7d00\u7530",
        "username": "amethyst_kida",
        "v_score": 0.495041,
        "e_score": null,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-09 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T17:59:15",
        "author_id": "19581478",
        "data_id": "1778120575338369128",
        "reposts": 1,
        "post": "rt @linda_pp: rust \u306e command \u306b\u898b\u3064\u304b\u3063\u305f\u30af\u30ea\u30c6\u30a3\u30ab\u30eb\u306a\u8106\u5f31\u6027(cve-2024-24576) \u306b\u3064\u3044\u3066\u306f\u5831\u544a\u8005\u304c\u4e01\u5be7\u306a\u89e3\u8aac\u3092\u66f8\u3044\u3066\u304f\u308c\u3066\u308b\uff0ecmd.exe \u306e\u5f15\u6570\u306e\u30af\u30a9\u30fc\u30c8\u306f\u96e3\u3057\u304f\u3066\u6642\u306b\u306f\u4e0d\u53ef\u80fd\u3068\u3044\u3046\u8a71\uff0e\"%var%\" \u3067 var \u304c\u30c0\u30d6\u30eb\u30af\u30a9\u30fc\u30c8\u2026",
        "audience": 993,
        "audience_total": 235472,
        "total_reposts": 162,
        "post_count": 2,
        "author": "fujiback",
        "username": "otherworldy",
        "v_score": 0.495041,
        "e_score": null,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-09 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T17:14:53",
        "author_id": "117342573",
        "data_id": "1778109407697707071",
        "reposts": 1,
        "post": "rt @dinosn: cve-2024-24576 (cvss 10): rust flaw exposes windows systems to command injection attacks https://t.co/sqrkumvoqv",
        "audience": 2371,
        "audience_total": 233103,
        "total_reposts": 160,
        "post_count": 2,
        "author": "g\u00fcnter born",
        "username": "etguenni",
        "v_score": 0.495041,
        "e_score": null,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-09 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T18:00:33",
        "author_id": "1354769436327120896",
        "data_id": "1778120901017604367",
        "reposts": 1,
        "post": "rt @mattn_jp: cve-2024-24576 \u306f\u304b\u306a\u308a\u3067\u5371\u306a\u3044\u3084\u3064\u306a\u306e\u3067 windows \u3067 rust \u66f8\u3044\u3066\u308b\u4eba\u306f\u8981\u66f4\u65b0\u3060\u3088\u3002\u3042\u3068 rust \u3067\u30d3\u30eb\u30c9\u3055\u308c\u305f\u7269\u306f\u8fd1\u65e5\u4e2d\u306b\u66f4\u65b0\u304c\u51fa\u308b\u306f\u305a\u306a\u306e\u3067\u305d\u308c\u3082\u66f4\u65b0\u304c\u5fc5\u8981\u3060\u3088\u3002",
        "audience": 28,
        "audience_total": 236473,
        "total_reposts": 163,
        "post_count": 2,
        "author": "\u307f\u3085\u30fc\u308b",
        "username": "__muell__",
        "v_score": 0.639634,
        "e_score": 0.00044,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-10 16:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T19:30:15",
        "author_id": "64929650",
        "data_id": "1778143474631815250",
        "reposts": 1,
        "post": "rt @mattn_jp: cve-2024-24576 \u306f\u304b\u306a\u308a\u3067\u5371\u306a\u3044\u3084\u3064\u306a\u306e\u3067 windows \u3067 rust \u66f8\u3044\u3066\u308b\u4eba\u306f\u8981\u66f4\u65b0\u3060\u3088\u3002\u3042\u3068 rust \u3067\u30d3\u30eb\u30c9\u3055\u308c\u305f\u7269\u306f\u8fd1\u65e5\u4e2d\u306b\u66f4\u65b0\u304c\u51fa\u308b\u306f\u305a\u306a\u306e\u3067\u305d\u308c\u3082\u66f4\u65b0\u304c\u5fc5\u8981\u3060\u3088\u3002",
        "audience": 1671,
        "audience_total": 237077,
        "total_reposts": 164,
        "post_count": 2,
        "author": "nacco\uff08ff7r\u30d7\u30ec\u30a4\u4e2d\uff09\ud83c\uddf9\ud83c\uddfc\ud83c\uddef\ud83c\uddf5",
        "username": "_nacco",
        "v_score": 0.639634,
        "e_score": 0.00044,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-10 16:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T18:48:37",
        "author_id": "1204752745481170944",
        "data_id": "1778132996480180280",
        "reposts": 1,
        "post": "rt @mnixry: \u5e72\u4ed6\u5a18\u7684\u547d\u4ee4\u884c\u53c2\u6570 - \u77e5\u4e4e\nhttps://t.co/exkher8qhu\n\n\u5efa\u8bae\u914d\u5408 cve-2024-24576 \u98df\u7528",
        "audience": 2225,
        "audience_total": 237077,
        "total_reposts": 164,
        "post_count": 2,
        "author": "@shellwen@meow.social \u269d",
        "username": "realshellwen",
        "v_score": 0.639634,
        "e_score": 0.00044,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-10 16:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T21:59:21",
        "author_id": "5146411",
        "data_id": "1778180998389440752",
        "reposts": 1,
        "post": "rt @mattn_jp: cve-2024-24576 \u306f\u304b\u306a\u308a\u3067\u5371\u306a\u3044\u3084\u3064\u306a\u306e\u3067 windows \u3067 rust \u66f8\u3044\u3066\u308b\u4eba\u306f\u8981\u66f4\u65b0\u3060\u3088\u3002\u3042\u3068 rust \u3067\u30d3\u30eb\u30c9\u3055\u308c\u305f\u7269\u306f\u8fd1\u65e5\u4e2d\u306b\u66f4\u65b0\u304c\u51fa\u308b\u306f\u305a\u306a\u306e\u3067\u305d\u308c\u3082\u66f4\u65b0\u304c\u5fc5\u8981\u3060\u3088\u3002",
        "audience": 1981,
        "audience_total": 242366,
        "total_reposts": 166,
        "post_count": 2,
        "author": "si\u24a8\ud83c\udf5a\ud83d\udc3f",
        "username": "onedime",
        "v_score": 0.639634,
        "e_score": 0.00044,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-10 16:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T21:58:47",
        "author_id": "12435662",
        "data_id": "1778180856953381025",
        "reposts": 1,
        "post": "rt @mattn_jp: cve-2024-24576 \u306f\u304b\u306a\u308a\u3067\u5371\u306a\u3044\u3084\u3064\u306a\u306e\u3067 windows \u3067 rust \u66f8\u3044\u3066\u308b\u4eba\u306f\u8981\u66f4\u65b0\u3060\u3088\u3002\u3042\u3068 rust \u3067\u30d3\u30eb\u30c9\u3055\u308c\u305f\u7269\u306f\u8fd1\u65e5\u4e2d\u306b\u66f4\u65b0\u304c\u51fa\u308b\u306f\u305a\u306a\u306e\u3067\u305d\u308c\u3082\u66f4\u65b0\u304c\u5fc5\u8981\u3060\u3088\u3002",
        "audience": 1533,
        "audience_total": 242366,
        "total_reposts": 166,
        "post_count": 2,
        "author": "\u3048\u3046\u308c\u304b",
        "username": "heureka",
        "v_score": 0.639634,
        "e_score": 0.00044,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-10 16:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T22:02:21",
        "author_id": "1386519188366262275",
        "data_id": "1778181753380938174",
        "reposts": 1,
        "post": "rt @rustjobs_dev: rust 1.77.2 has been released\n\nthis release includes a fix for cve-2024-24576.\n\nrun `rustup update stable` to upgrade!\n\nf\u2026",
        "audience": 45,
        "audience_total": 244743,
        "total_reposts": 168,
        "post_count": 2,
        "author": "moldy \ud83d\udc27",
        "username": "moldy05814050",
        "v_score": 0.639634,
        "e_score": 0.00044,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-10 16:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T23:32:27",
        "author_id": "231431575",
        "data_id": "1778204426643333372",
        "reposts": 1,
        "post": "rt @__kokmt: rust\u8a00\u8a9e\u306ewindows\u74b0\u5883\u5411\u3051\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u30b3\u30de\u30f3\u30c9\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u304c\u53ef\u80fd\u3068\u306a\u308b\u91cd\u5927\u306a\u8106\u5f31\u6027\u3002cve-2024-24576\u3067cvss\u30b9\u30b3\u30a210\u3002\u30d0\u30c3\u30c1\u30d5\u30a1\u30a4\u30eb\u304b\u3089command api\u3092\u547c\u3073\u51fa\u3057\u305f\u969b\u306e\u5f15\u6570\u30a8\u30b9\u30b1\u30fc\u30d7\u306b\u304a\u3051\u308b\u4e0d\u5099\u3002\u30d0\u30fc\u30b8\u30e7\u30f31.7\u2026",
        "audience": 494,
        "audience_total": 251855,
        "total_reposts": 170,
        "post_count": 2,
        "author": "\u6c34\u8349\u307e\u3053\u3082",
        "username": "makomo_1016",
        "v_score": 0.639634,
        "e_score": 0.00044,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-10 16:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-11T00:16:56",
        "author_id": "3226913497",
        "data_id": "1778215620464816636",
        "reposts": 1,
        "post": "rt @mattn_jp: cve-2024-24576 \u306f\u304b\u306a\u308a\u3067\u5371\u306a\u3044\u3084\u3064\u306a\u306e\u3067 windows \u3067 rust \u66f8\u3044\u3066\u308b\u4eba\u306f\u8981\u66f4\u65b0\u3060\u3088\u3002\u3042\u3068 rust \u3067\u30d3\u30eb\u30c9\u3055\u308c\u305f\u7269\u306f\u8fd1\u65e5\u4e2d\u306b\u66f4\u65b0\u304c\u51fa\u308b\u306f\u305a\u306a\u306e\u3067\u305d\u308c\u3082\u66f4\u65b0\u304c\u5fc5\u8981\u3060\u3088\u3002",
        "audience": 162,
        "audience_total": 257556,
        "total_reposts": 176,
        "post_count": 2,
        "author": "skitoy4321",
        "username": "skitoy4321",
        "v_score": 0.639634,
        "e_score": 0.00044,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-10 16:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T23:34:58",
        "author_id": "961934520202158080",
        "data_id": "1778205059656114261",
        "reposts": 1,
        "post": "rt @linda_pp: rust \u306e command \u306b\u898b\u3064\u304b\u3063\u305f\u30af\u30ea\u30c6\u30a3\u30ab\u30eb\u306a\u8106\u5f31\u6027(cve-2024-24576) \u306b\u3064\u3044\u3066\u306f\u5831\u544a\u8005\u304c\u4e01\u5be7\u306a\u89e3\u8aac\u3092\u66f8\u3044\u3066\u304f\u308c\u3066\u308b\uff0ecmd.exe \u306e\u5f15\u6570\u306e\u30af\u30a9\u30fc\u30c8\u306f\u96e3\u3057\u304f\u3066\u6642\u306b\u306f\u4e0d\u53ef\u80fd\u3068\u3044\u3046\u8a71\uff0e\"%var%\" \u3067 var \u304c\u30c0\u30d6\u30eb\u30af\u30a9\u30fc\u30c8\u2026",
        "audience": 1836,
        "audience_total": 252408,
        "total_reposts": 172,
        "post_count": 2,
        "author": "\u304c\u3063\u3061\u3083",
        "username": "take_gattcha",
        "v_score": 0.639634,
        "e_score": 0.00044,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-10 16:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-11T00:07:25",
        "author_id": "36333882",
        "data_id": "1778213228340035769",
        "reposts": 1,
        "post": "rt @linda_pp: rust \u306e command \u306b\u898b\u3064\u304b\u3063\u305f\u30af\u30ea\u30c6\u30a3\u30ab\u30eb\u306a\u8106\u5f31\u6027(cve-2024-24576) \u306b\u3064\u3044\u3066\u306f\u5831\u544a\u8005\u304c\u4e01\u5be7\u306a\u89e3\u8aac\u3092\u66f8\u3044\u3066\u304f\u308c\u3066\u308b\uff0ecmd.exe \u306e\u5f15\u6570\u306e\u30af\u30a9\u30fc\u30c8\u306f\u96e3\u3057\u304f\u3066\u6642\u306b\u306f\u4e0d\u53ef\u80fd\u3068\u3044\u3046\u8a71\uff0e\"%var%\" \u3067 var \u304c\u30c0\u30d6\u30eb\u30af\u30a9\u30fc\u30c8\u2026",
        "audience": 569,
        "audience_total": 252408,
        "total_reposts": 172,
        "post_count": 2,
        "author": "\u3057\u305d",
        "username": "sisomoti",
        "v_score": 0.639634,
        "e_score": 0.00044,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-10 16:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T22:46:04",
        "author_id": "1404136054408450049",
        "data_id": "1778192753907879987",
        "reposts": 1,
        "post": "rt @mattn_jp: cve-2024-24576 \u306f\u304b\u306a\u308a\u3067\u5371\u306a\u3044\u3084\u3064\u306a\u306e\u3067 windows \u3067 rust \u66f8\u3044\u3066\u308b\u4eba\u306f\u8981\u66f4\u65b0\u3060\u3088\u3002\u3042\u3068 rust \u3067\u30d3\u30eb\u30c9\u3055\u308c\u305f\u7269\u306f\u8fd1\u65e5\u4e2d\u306b\u66f4\u65b0\u304c\u51fa\u308b\u306f\u305a\u306a\u306e\u3067\u305d\u308c\u3082\u66f4\u65b0\u304c\u5fc5\u8981\u3060\u3088\u3002",
        "audience": 507,
        "audience_total": 251855,
        "total_reposts": 170,
        "post_count": 2,
        "author": "nero",
        "username": "an_apy_2",
        "v_score": 0.639634,
        "e_score": 0.00044,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-10 16:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-11T00:15:41",
        "author_id": "180535165",
        "data_id": "1778215308089827406",
        "reposts": 1,
        "post": "rt @mattn_jp: cve-2024-24576 \u306f\u304b\u306a\u308a\u3067\u5371\u306a\u3044\u3084\u3064\u306a\u306e\u3067 windows \u3067 rust \u66f8\u3044\u3066\u308b\u4eba\u306f\u8981\u66f4\u65b0\u3060\u3088\u3002\u3042\u3068 rust \u3067\u30d3\u30eb\u30c9\u3055\u308c\u305f\u7269\u306f\u8fd1\u65e5\u4e2d\u306b\u66f4\u65b0\u304c\u51fa\u308b\u306f\u305a\u306a\u306e\u3067\u305d\u308c\u3082\u66f4\u65b0\u304c\u5fc5\u8981\u3060\u3088\u3002",
        "audience": 970,
        "audience_total": 257444,
        "total_reposts": 175,
        "post_count": 2,
        "author": "motoki tokifuji \u2122 \u96e3\u6cbb\u6027\u5598\u606f/\u810a\u67f1\u7ba1\u72ed\u7a84\u75c7\u306b\u8eab\u4f53\u969c\u5bb3\u80052\u7d1a\u3068\u3057\u3066\u6226\u3046\u30a8\u30f3\u30b8\u30cb\u30a2",
        "username": "tokifujp",
        "v_score": 0.639634,
        "e_score": 0.00044,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-10 16:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T22:40:22",
        "author_id": "1200393559414673408",
        "data_id": "1778191319636299843",
        "reposts": 1,
        "post": "rt @mattn_jp: cve-2024-24576 \u306f\u304b\u306a\u308a\u3067\u5371\u306a\u3044\u3084\u3064\u306a\u306e\u3067 windows \u3067 rust \u66f8\u3044\u3066\u308b\u4eba\u306f\u8981\u66f4\u65b0\u3060\u3088\u3002\u3042\u3068 rust \u3067\u30d3\u30eb\u30c9\u3055\u308c\u305f\u7269\u306f\u8fd1\u65e5\u4e2d\u306b\u66f4\u65b0\u304c\u51fa\u308b\u306f\u305a\u306a\u306e\u3067\u305d\u308c\u3082\u66f4\u65b0\u304c\u5fc5\u8981\u3060\u3088\u3002",
        "audience": 780,
        "audience_total": 244743,
        "total_reposts": 168,
        "post_count": 2,
        "author": "\u306c\u307e\u308b\u3061\u3083\u3093\ud83d\udc9e\ud83e\udda9",
        "username": "nmrtoumr",
        "v_score": 0.639634,
        "e_score": 0.00044,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-10 16:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-10T23:38:21",
        "author_id": "758941831719550977",
        "data_id": "1778205911599010277",
        "reposts": 1,
        "post": "rt @mattn_jp: cve-2024-24576 \u306f\u304b\u306a\u308a\u3067\u5371\u306a\u3044\u3084\u3064\u306a\u306e\u3067 windows \u3067 rust \u66f8\u3044\u3066\u308b\u4eba\u306f\u8981\u66f4\u65b0\u3060\u3088\u3002\u3042\u3068 rust \u3067\u30d3\u30eb\u30c9\u3055\u308c\u305f\u7269\u306f\u8fd1\u65e5\u4e2d\u306b\u66f4\u65b0\u304c\u51fa\u308b\u306f\u305a\u306a\u306e\u3067\u305d\u308c\u3082\u66f4\u65b0\u304c\u5fc5\u8981\u3060\u3088\u3002",
        "audience": 112,
        "audience_total": 252408,
        "total_reposts": 172,
        "post_count": 2,
        "author": "kounis",
        "username": "kounis_enl",
        "v_score": 0.639634,
        "e_score": 0.00044,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-10 16:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-11T00:25:10",
        "author_id": "47373597",
        "data_id": "1778217695332450651",
        "reposts": 1,
        "post": "rt @mattn_jp: cve-2024-24576 \u306f\u304b\u306a\u308a\u3067\u5371\u306a\u3044\u3084\u3064\u306a\u306e\u3067 windows \u3067 rust \u66f8\u3044\u3066\u308b\u4eba\u306f\u8981\u66f4\u65b0\u3060\u3088\u3002\u3042\u3068 rust \u3067\u30d3\u30eb\u30c9\u3055\u308c\u305f\u7269\u306f\u8fd1\u65e5\u4e2d\u306b\u66f4\u65b0\u304c\u51fa\u308b\u306f\u305a\u306a\u306e\u3067\u305d\u308c\u3082\u66f4\u65b0\u304c\u5fc5\u8981\u3060\u3088\u3002",
        "audience": 2168,
        "audience_total": 258101,
        "total_reposts": 177,
        "post_count": 2,
        "author": "\u30e9\u30fc\u30e1\u30f3\u5927\u597d\u304d\u3057\u308d\u304f\u307e\u3055\u3093",
        "username": "kumappus",
        "v_score": 0.639634,
        "e_score": 0.00044,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-10 16:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-11T01:03:56",
        "author_id": "7784272",
        "data_id": "1778227449689690505",
        "reposts": 1,
        "post": "rt @linda_pp: rust \u306e command \u306b\u898b\u3064\u304b\u3063\u305f\u30af\u30ea\u30c6\u30a3\u30ab\u30eb\u306a\u8106\u5f31\u6027(cve-2024-24576) \u306b\u3064\u3044\u3066\u306f\u5831\u544a\u8005\u304c\u4e01\u5be7\u306a\u89e3\u8aac\u3092\u66f8\u3044\u3066\u304f\u308c\u3066\u308b\uff0ecmd.exe \u306e\u5f15\u6570\u306e\u30af\u30a9\u30fc\u30c8\u306f\u96e3\u3057\u304f\u3066\u6642\u306b\u306f\u4e0d\u53ef\u80fd\u3068\u3044\u3046\u8a71\uff0e\"%var%\" \u3067 var \u304c\u30c0\u30d6\u30eb\u30af\u30a9\u30fc\u30c8\u2026",
        "audience": 26,
        "audience_total": 262820,
        "total_reposts": 178,
        "post_count": 2,
        "author": "rednine",
        "username": "rednine",
        "v_score": 0.639634,
        "e_score": 0.00044,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-10 16:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-11T01:03:54",
        "author_id": "4949121",
        "data_id": "1778227441636663348",
        "reposts": 1,
        "post": "rt @mattn_jp: cve-2024-24576 \u306f\u304b\u306a\u308a\u3067\u5371\u306a\u3044\u3084\u3064\u306a\u306e\u3067 windows \u3067 rust \u66f8\u3044\u3066\u308b\u4eba\u306f\u8981\u66f4\u65b0\u3060\u3088\u3002\u3042\u3068 rust \u3067\u30d3\u30eb\u30c9\u3055\u308c\u305f\u7269\u306f\u8fd1\u65e5\u4e2d\u306b\u66f4\u65b0\u304c\u51fa\u308b\u306f\u305a\u306a\u306e\u3067\u305d\u308c\u3082\u66f4\u65b0\u304c\u5fc5\u8981\u3060\u3088\u3002",
        "audience": 187,
        "audience_total": 262820,
        "total_reposts": 178,
        "post_count": 2,
        "author": "ystq masahiro\ud83e\udee0",
        "username": "sam_tk",
        "v_score": 0.639634,
        "e_score": 0.00044,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-10 16:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-11T01:12:41",
        "author_id": "8055732",
        "data_id": "1778229653519688015",
        "reposts": 1,
        "post": "rt @__kokmt: rust\u8a00\u8a9e\u306ewindows\u74b0\u5883\u5411\u3051\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u30b3\u30de\u30f3\u30c9\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u304c\u53ef\u80fd\u3068\u306a\u308b\u91cd\u5927\u306a\u8106\u5f31\u6027\u3002cve-2024-24576\u3067cvss\u30b9\u30b3\u30a210\u3002\u30d0\u30c3\u30c1\u30d5\u30a1\u30a4\u30eb\u304b\u3089command api\u3092\u547c\u3073\u51fa\u3057\u305f\u969b\u306e\u5f15\u6570\u30a8\u30b9\u30b1\u30fc\u30d7\u306b\u304a\u3051\u308b\u4e0d\u5099\u3002\u30d0\u30fc\u30b8\u30e7\u30f31.7\u2026",
        "audience": 1223,
        "audience_total": 265989,
        "total_reposts": 180,
        "post_count": 2,
        "author": "mitsuru shimamura",
        "username": "smbd",
        "v_score": 0.639634,
        "e_score": 0.00044,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-10 16:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": "https://pbs.twimg.com/profile_images/53194386/momo-logo_normal.png",
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-11T01:55:37",
        "author_id": "20748005",
        "data_id": "1778240457308541005",
        "reposts": 1,
        "post": "rt @linda_pp: rust \u306e command \u306b\u898b\u3064\u304b\u3063\u305f\u30af\u30ea\u30c6\u30a3\u30ab\u30eb\u306a\u8106\u5f31\u6027(cve-2024-24576) \u306b\u3064\u3044\u3066\u306f\u5831\u544a\u8005\u304c\u4e01\u5be7\u306a\u89e3\u8aac\u3092\u66f8\u3044\u3066\u304f\u308c\u3066\u308b\uff0ecmd.exe \u306e\u5f15\u6570\u306e\u30af\u30a9\u30fc\u30c8\u306f\u96e3\u3057\u304f\u3066\u6642\u306b\u306f\u4e0d\u53ef\u80fd\u3068\u3044\u3046\u8a71\uff0e\"%var%\" \u3067 var \u304c\u30c0\u30d6\u30eb\u30af\u30a9\u30fc\u30c8\u2026",
        "audience": 1146,
        "audience_total": 266414,
        "total_reposts": 181,
        "post_count": 2,
        "author": "shiromadara",
        "username": "oogomadara",
        "v_score": 0.642339,
        "e_score": 0.00044,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-10 16:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-11T05:09:14",
        "author_id": "73773597",
        "data_id": "1778289179354702030",
        "reposts": 1,
        "post": "rt @mattn_jp: cve-2024-24576 \u306f\u304b\u306a\u308a\u3067\u5371\u306a\u3044\u3084\u3064\u306a\u306e\u3067 windows \u3067 rust \u66f8\u3044\u3066\u308b\u4eba\u306f\u8981\u66f4\u65b0\u3060\u3088\u3002\u3042\u3068 rust \u3067\u30d3\u30eb\u30c9\u3055\u308c\u305f\u7269\u306f\u8fd1\u65e5\u4e2d\u306b\u66f4\u65b0\u304c\u51fa\u308b\u306f\u305a\u306a\u306e\u3067\u305d\u308c\u3082\u66f4\u65b0\u304c\u5fc5\u8981\u3060\u3088\u3002",
        "audience": 1001,
        "audience_total": 266414,
        "total_reposts": 181,
        "post_count": 2,
        "author": "shibuya, nobuhiro",
        "username": "nsh1960",
        "v_score": 0.642339,
        "e_score": 0.00044,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN [`INVALIDINPUT`][4] ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-10 16:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-11T05:55:16",
        "author_id": "1064525602118557696",
        "data_id": "1778300764076544310",
        "reposts": 1,
        "post": "rt @mattn_jp: cve-2024-24576 \u306f\u304b\u306a\u308a\u3067\u5371\u306a\u3044\u3084\u3064\u306a\u306e\u3067 windows \u3067 rust \u66f8\u3044\u3066\u308b\u4eba\u306f\u8981\u66f4\u65b0\u3060\u3088\u3002\u3042\u3068 rust \u3067\u30d3\u30eb\u30c9\u3055\u308c\u305f\u7269\u306f\u8fd1\u65e5\u4e2d\u306b\u66f4\u65b0\u304c\u51fa\u308b\u306f\u305a\u306a\u306e\u3067\u305d\u308c\u3082\u66f4\u65b0\u304c\u5fc5\u8981\u3060\u3088\u3002",
        "audience": 604,
        "audience_total": 266539,
        "total_reposts": 181,
        "post_count": 3,
        "author": "\u3042\u308b\u3075\u3041\uff01\uff01\uff01",
        "username": "alpha8n",
        "v_score": 0.735582,
        "e_score": 0.00044,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN `INVALIDINPUT` ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-12 02:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-11T07:33:29",
        "author_id": "353266096",
        "data_id": "1778325482267984101",
        "reposts": 1,
        "post": "rt @__kokmt: rust\u8a00\u8a9e\u306ewindows\u74b0\u5883\u5411\u3051\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u30b3\u30de\u30f3\u30c9\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u304c\u53ef\u80fd\u3068\u306a\u308b\u91cd\u5927\u306a\u8106\u5f31\u6027\u3002cve-2024-24576\u3067cvss\u30b9\u30b3\u30a210\u3002\u30d0\u30c3\u30c1\u30d5\u30a1\u30a4\u30eb\u304b\u3089command api\u3092\u547c\u3073\u51fa\u3057\u305f\u969b\u306e\u5f15\u6570\u30a8\u30b9\u30b1\u30fc\u30d7\u306b\u304a\u3051\u308b\u4e0d\u5099\u3002\u30d0\u30fc\u30b8\u30e7\u30f31.7\u2026",
        "audience": 23,
        "audience_total": 267093,
        "total_reposts": 182,
        "post_count": 3,
        "author": "mirage4th",
        "username": "mirage4th",
        "v_score": 0.735582,
        "e_score": 0.00044,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN `INVALIDINPUT` ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-12 02:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-11T06:30:22",
        "author_id": "1468603771114639362",
        "data_id": "1778309597532655718",
        "reposts": 1,
        "post": "rt @rustjobs_dev: rust 1.77.2 has been released\n\nthis release includes a fix for cve-2024-24576.\n\nrun `rustup update stable` to upgrade!\n\nf\u2026",
        "audience": 5266,
        "audience_total": 267093,
        "total_reposts": 182,
        "post_count": 3,
        "author": "rust jobs \ud83e\udd80",
        "username": "rustjobs_dev",
        "v_score": 0.735582,
        "e_score": 0.00044,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN `INVALIDINPUT` ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-12 02:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-11T09:05:33",
        "author_id": "1167433975624634368",
        "data_id": "1778348652064604191",
        "reposts": 1,
        "post": "rt @mattn_jp: cve-2024-24576 \u306f\u304b\u306a\u308a\u3067\u5371\u306a\u3044\u3084\u3064\u306a\u306e\u3067 windows \u3067 rust \u66f8\u3044\u3066\u308b\u4eba\u306f\u8981\u66f4\u65b0\u3060\u3088\u3002\u3042\u3068 rust \u3067\u30d3\u30eb\u30c9\u3055\u308c\u305f\u7269\u306f\u8fd1\u65e5\u4e2d\u306b\u66f4\u65b0\u304c\u51fa\u308b\u306f\u305a\u306a\u306e\u3067\u305d\u308c\u3082\u66f4\u65b0\u304c\u5fc5\u8981\u3060\u3088\u3002",
        "audience": 504,
        "audience_total": 267093,
        "total_reposts": 182,
        "post_count": 3,
        "author": "\u3042\u3044\u307e\u3044",
        "username": "avvzleinbtbtlbr",
        "v_score": 0.735582,
        "e_score": 0.00044,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN `INVALIDINPUT` ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-12 02:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-11T08:12:06",
        "author_id": "219733439",
        "data_id": "1778335199689839057",
        "reposts": 1,
        "post": "rt @the_yellow_fall: cve-2024-24576, rated with a cvss score of 10, stems from a flaw in the mechanism for passing commands and arguments t\u2026",
        "audience": 1873,
        "audience_total": 267093,
        "total_reposts": 182,
        "post_count": 3,
        "author": "paul dokas",
        "username": "pauldokas",
        "v_score": 0.735582,
        "e_score": 0.00044,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN `INVALIDINPUT` ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-12 02:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-11T09:35:04",
        "author_id": "14601007",
        "data_id": "1778356081548513610",
        "reposts": 1,
        "post": "rt @linda_pp: rust \u306e command \u306b\u898b\u3064\u304b\u3063\u305f\u30af\u30ea\u30c6\u30a3\u30ab\u30eb\u306a\u8106\u5f31\u6027(cve-2024-24576) \u306b\u3064\u3044\u3066\u306f\u5831\u544a\u8005\u304c\u4e01\u5be7\u306a\u89e3\u8aac\u3092\u66f8\u3044\u3066\u304f\u308c\u3066\u308b\uff0ecmd.exe \u306e\u5f15\u6570\u306e\u30af\u30a9\u30fc\u30c8\u306f\u96e3\u3057\u304f\u3066\u6642\u306b\u306f\u4e0d\u53ef\u80fd\u3068\u3044\u3046\u8a71\uff0e\"%var%\" \u3067 var \u304c\u30c0\u30d6\u30eb\u30af\u30a9\u30fc\u30c8\u2026",
        "audience": 527,
        "audience_total": 267093,
        "total_reposts": 182,
        "post_count": 3,
        "author": "ppoi",
        "username": "ppoi",
        "v_score": 0.735582,
        "e_score": 0.00044,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN `INVALIDINPUT` ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-12 02:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-11T09:50:12",
        "author_id": "1458340834714128384",
        "data_id": "1778359890291085524",
        "reposts": 1,
        "post": "rt @brains933: made some super simple poc code to demonstrate cve-2024-24576 in python. the cve is predominantly talking about rust but it\u2026",
        "audience": 6585,
        "audience_total": 267093,
        "total_reposts": 182,
        "post_count": 3,
        "author": "\u66fe\u54e5",
        "username": "aabysszg",
        "v_score": 0.735582,
        "e_score": 0.00044,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN `INVALIDINPUT` ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-12 02:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-11T11:28:08",
        "author_id": "1029734322289307656",
        "data_id": "1778384536101106017",
        "reposts": 1,
        "post": "rt @mattn_jp: cve-2024-24576 \u306f\u304b\u306a\u308a\u3067\u5371\u306a\u3044\u3084\u3064\u306a\u306e\u3067 windows \u3067 rust \u66f8\u3044\u3066\u308b\u4eba\u306f\u8981\u66f4\u65b0\u3060\u3088\u3002\u3042\u3068 rust \u3067\u30d3\u30eb\u30c9\u3055\u308c\u305f\u7269\u306f\u8fd1\u65e5\u4e2d\u306b\u66f4\u65b0\u304c\u51fa\u308b\u306f\u305a\u306a\u306e\u3067\u305d\u308c\u3082\u66f4\u65b0\u304c\u5fc5\u8981\u3060\u3088\u3002",
        "audience": 386,
        "audience_total": 275058,
        "total_reposts": 188,
        "post_count": 3,
        "author": "4/15 \u306b\u30c9\u30e1\u30a4\u30f3\u3068\u304b\u8af8\u3005\u306e\u66f4\u65b0\u3042\u308b\u306e\u3067\u6ce8\u610f",
        "username": "kyureq",
        "v_score": 0.735621,
        "e_score": 0.00044,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN `INVALIDINPUT` ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-12 02:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-11T11:26:10",
        "author_id": "810419739122139136",
        "data_id": "1778384039499686109",
        "reposts": 1,
        "post": "rt @mattn_jp: cve-2024-24576 \u306f\u304b\u306a\u308a\u3067\u5371\u306a\u3044\u3084\u3064\u306a\u306e\u3067 windows \u3067 rust \u66f8\u3044\u3066\u308b\u4eba\u306f\u8981\u66f4\u65b0\u3060\u3088\u3002\u3042\u3068 rust \u3067\u30d3\u30eb\u30c9\u3055\u308c\u305f\u7269\u306f\u8fd1\u65e5\u4e2d\u306b\u66f4\u65b0\u304c\u51fa\u308b\u306f\u305a\u306a\u306e\u3067\u305d\u308c\u3082\u66f4\u65b0\u304c\u5fc5\u8981\u3060\u3088\u3002",
        "audience": 167,
        "audience_total": 267093,
        "total_reposts": 182,
        "post_count": 3,
        "author": "kenta a.",
        "username": "iskenta14",
        "v_score": 0.735582,
        "e_score": 0.00044,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN `INVALIDINPUT` ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-12 02:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-11T12:19:18",
        "author_id": "258251659",
        "data_id": "1778397413012901934",
        "reposts": 1,
        "post": "rt @mattn_jp: cve-2024-24576 \u306f\u304b\u306a\u308a\u3067\u5371\u306a\u3044\u3084\u3064\u306a\u306e\u3067 windows \u3067 rust \u66f8\u3044\u3066\u308b\u4eba\u306f\u8981\u66f4\u65b0\u3060\u3088\u3002\u3042\u3068 rust \u3067\u30d3\u30eb\u30c9\u3055\u308c\u305f\u7269\u306f\u8fd1\u65e5\u4e2d\u306b\u66f4\u65b0\u304c\u51fa\u308b\u306f\u305a\u306a\u306e\u3067\u305d\u308c\u3082\u66f4\u65b0\u304c\u5fc5\u8981\u3060\u3088\u3002",
        "audience": 1133,
        "audience_total": 275885,
        "total_reposts": 189,
        "post_count": 3,
        "author": "\u8349\u7a3f",
        "username": "akabzihen",
        "v_score": 0.735621,
        "e_score": 0.00044,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN `INVALIDINPUT` ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-12 02:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-11T13:00:03",
        "author_id": "41039340",
        "data_id": "1778407667247231113",
        "reposts": 1,
        "post": "rt @dinosn: cve-2024-24576 (cvss 10): rust flaw exposes windows systems to command injection attacks https://t.co/sqrkumvoqv",
        "audience": 442,
        "audience_total": 275885,
        "total_reposts": 189,
        "post_count": 3,
        "author": "\u65e5\u843d zero",
        "username": "johnroyer",
        "v_score": 0.735621,
        "e_score": 0.00044,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN `INVALIDINPUT` ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-12 02:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-11T12:59:04",
        "author_id": "2795511",
        "data_id": "1778407419787522061",
        "reposts": 1,
        "post": "rt @dinosn: cve-2024-24576 (cvss 10): rust flaw exposes windows systems to command injection attacks https://t.co/sqrkumvoqv",
        "audience": 3461,
        "audience_total": 275885,
        "total_reposts": 189,
        "post_count": 3,
        "author": "ying-chieh liao",
        "username": "ijliao",
        "v_score": 0.735621,
        "e_score": 0.00044,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN `INVALIDINPUT` ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-12 02:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-11T13:05:24",
        "author_id": "1514613727449870338",
        "data_id": "1778409012666761510",
        "reposts": 1,
        "post": "rt @mattn_jp: cve-2024-24576 \u306f\u304b\u306a\u308a\u3067\u5371\u306a\u3044\u3084\u3064\u306a\u306e\u3067 windows \u3067 rust \u66f8\u3044\u3066\u308b\u4eba\u306f\u8981\u66f4\u65b0\u3060\u3088\u3002\u3042\u3068 rust \u3067\u30d3\u30eb\u30c9\u3055\u308c\u305f\u7269\u306f\u8fd1\u65e5\u4e2d\u306b\u66f4\u65b0\u304c\u51fa\u308b\u306f\u305a\u306a\u306e\u3067\u305d\u308c\u3082\u66f4\u65b0\u304c\u5fc5\u8981\u3060\u3088\u3002",
        "audience": 112,
        "audience_total": 283851,
        "total_reposts": 191,
        "post_count": 3,
        "author": "\u30b5\u30e0\u30c8\u30a6\u30e2",
        "username": "hwlloewryowe",
        "v_score": 0.735843,
        "e_score": 0.00044,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN `INVALIDINPUT` ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-12 02:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-11T16:59:27",
        "author_id": "517378498",
        "data_id": "1778467912996827607",
        "reposts": 1,
        "post": "rt @mattn_jp: cve-2024-24576 \u306f\u304b\u306a\u308a\u3067\u5371\u306a\u3044\u3084\u3064\u306a\u306e\u3067 windows \u3067 rust \u66f8\u3044\u3066\u308b\u4eba\u306f\u8981\u66f4\u65b0\u3060\u3088\u3002\u3042\u3068 rust \u3067\u30d3\u30eb\u30c9\u3055\u308c\u305f\u7269\u306f\u8fd1\u65e5\u4e2d\u306b\u66f4\u65b0\u304c\u51fa\u308b\u306f\u305a\u306a\u306e\u3067\u305d\u308c\u3082\u66f4\u65b0\u304c\u5fc5\u8981\u3060\u3088\u3002",
        "audience": 545,
        "audience_total": 283851,
        "total_reposts": 191,
        "post_count": 3,
        "author": "\u85e4\u5d0e@\u632f\u308a\u8fbc\u307f",
        "username": "halksel",
        "v_score": 0.735843,
        "e_score": 0.00044,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN `INVALIDINPUT` ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-12 02:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-11T17:41:44",
        "author_id": "620341271",
        "data_id": "1778478554118042096",
        "reposts": 1,
        "post": "rt @the_yellow_fall: cve-2024-24576, rated with a cvss score of 10, stems from a flaw in the mechanism for passing commands and arguments t\u2026",
        "audience": 4719,
        "audience_total": 288547,
        "total_reposts": 193,
        "post_count": 3,
        "author": "douglas mun",
        "username": "douglasmun",
        "v_score": 0.735843,
        "e_score": 0.00044,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN `INVALIDINPUT` ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-12 02:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": "https://pbs.twimg.com/profile_images/672417276298006530/XWXxFTkp_normal.jpg",
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-12T01:26:35",
        "author_id": "14809627",
        "data_id": "1778595539484852621",
        "reposts": 1,
        "post": "rt @thehackersnews: \u26a0\ufe0f attention developers: a severe #vulnerability (cve-2024-24576) in the rust standard library could lead to command in\u2026",
        "audience": 2382,
        "audience_total": 288547,
        "total_reposts": 193,
        "post_count": 3,
        "author": "robert malmgren",
        "username": "mitt_nya_nym",
        "v_score": 0.735843,
        "e_score": 0.00044,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN `INVALIDINPUT` ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-12 02:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": "https://pbs.twimg.com/profile_images/54312292/southpark-robban_normal.jpg",
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-12T01:26:59",
        "author_id": "39832728",
        "data_id": "1778595639292784781",
        "reposts": 1,
        "post": "rt @mattn_jp: cve-2024-24576 \u306f\u304b\u306a\u308a\u3067\u5371\u306a\u3044\u3084\u3064\u306a\u306e\u3067 windows \u3067 rust \u66f8\u3044\u3066\u308b\u4eba\u306f\u8981\u66f4\u65b0\u3060\u3088\u3002\u3042\u3068 rust \u3067\u30d3\u30eb\u30c9\u3055\u308c\u305f\u7269\u306f\u8fd1\u65e5\u4e2d\u306b\u66f4\u65b0\u304c\u51fa\u308b\u306f\u305a\u306a\u306e\u3067\u305d\u308c\u3082\u66f4\u65b0\u304c\u5fc5\u8981\u3060\u3088\u3002",
        "audience": 787,
        "audience_total": 289806,
        "total_reposts": 195,
        "post_count": 3,
        "author": "\u3051\u3093\u3051\u3093\u3000\ud83d\udc896th ba.5/1\u5bfe\u7b56\u6e08\u307f",
        "username": "fedoraupspin",
        "v_score": 0.735843,
        "e_score": 0.00044,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN `INVALIDINPUT` ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-12 02:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-12T04:39:14",
        "author_id": "5702422",
        "data_id": "1778644018563527029",
        "reposts": 1,
        "post": "rt @mattn_jp: cve-2024-24576 \u306f\u304b\u306a\u308a\u3067\u5371\u306a\u3044\u3084\u3064\u306a\u306e\u3067 windows \u3067 rust \u66f8\u3044\u3066\u308b\u4eba\u306f\u8981\u66f4\u65b0\u3060\u3088\u3002\u3042\u3068 rust \u3067\u30d3\u30eb\u30c9\u3055\u308c\u305f\u7269\u306f\u8fd1\u65e5\u4e2d\u306b\u66f4\u65b0\u304c\u51fa\u308b\u306f\u305a\u306a\u306e\u3067\u305d\u308c\u3082\u66f4\u65b0\u304c\u5fc5\u8981\u3060\u3088\u3002",
        "audience": 425,
        "audience_total": 291205,
        "total_reposts": 196,
        "post_count": 3,
        "author": "\u4e73\u725b@\u305d\u308c\u306f\u307e\u3060\u65e9\u3044\uff01",
        "username": "newgyu",
        "v_score": 0.735843,
        "e_score": 0.00044,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN `INVALIDINPUT` ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-12 02:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-13T16:37:47",
        "author_id": "1756999699679338496",
        "data_id": "1779187237642792975",
        "reposts": 0,
        "post": "https://t.co/qezvwdl0ma\n\nhttps://t.co/dnjas3nzje",
        "audience": 125,
        "audience_total": 293286,
        "total_reposts": 198,
        "post_count": 3,
        "author": "patch now !!",
        "username": "patchnow24x7",
        "v_score": 0.735843,
        "e_score": 0.00044,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN `INVALIDINPUT` ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-12 02:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-13T16:36:37",
        "author_id": "1756999699679338496",
        "data_id": "1779186944196710735",
        "reposts": 0,
        "post": "https://t.co/qezvwdl0ma\n\nhttps://t.co/dnjas3nzje",
        "audience": 125,
        "audience_total": 293002,
        "total_reposts": 197,
        "post_count": 3,
        "author": "patch now !!",
        "username": "patchnow24x7",
        "v_score": 0.735843,
        "e_score": 0.00044,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN `INVALIDINPUT` ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-12 02:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-13T22:10:38",
        "author_id": "95880702",
        "data_id": "1779271001957880232",
        "reposts": 1,
        "post": "rt @thehackersnews: \u26a0\ufe0f attention developers: a severe #vulnerability (cve-2024-24576) in the rust standard library could lead to command in\u2026",
        "audience": 554,
        "audience_total": 302383,
        "total_reposts": 198,
        "post_count": 4,
        "author": "\u30ea\u30fc\u30eb\u30af-san",
        "username": "liruk",
        "v_score": 0.735843,
        "e_score": 0.00044,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN `INVALIDINPUT` ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-12 02:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-15T01:01:48",
        "author_id": "14542307",
        "data_id": "1779676464444768555",
        "reposts": 1,
        "post": "rt @mattn_jp: \u5148\u65e5 rust \u306e\u8106\u5f31\u6027 cve-2024-24576 \u304c\u8a71\u984c\u306b\u306a\u3063\u305f\u3051\u3069\u540c\u985e\u306e\u554f\u984c\u304c\u3042\u308b\u3068\u3057\u3066\ncve-2024-1874\ncve-2024-22423\ncve-2024-35666\n\u304c\u3042\u308b\u3068\u306e\u4e8b\u3002\n\nhaskell \u306e process v1.0.\u2026",
        "audience": 467,
        "audience_total": 302576,
        "total_reposts": 200,
        "post_count": 4,
        "author": "\u753b\u8cea\u306e\u8352\u3044\u30ac\u30eb\u30d1\u30f3\u304a\u3058\u3055\u3093",
        "username": "mix3",
        "v_score": 0.737088,
        "e_score": 0.00046,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN `INVALIDINPUT` ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-05-01 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-15T01:50:29",
        "author_id": "1251800280011665409",
        "data_id": "1779688714865963122",
        "reposts": 1,
        "post": "rt @mattn_jp: \u5148\u65e5 rust \u306e\u8106\u5f31\u6027 cve-2024-24576 \u304c\u8a71\u984c\u306b\u306a\u3063\u305f\u3051\u3069\u540c\u985e\u306e\u554f\u984c\u304c\u3042\u308b\u3068\u3057\u3066\ncve-2024-1874\ncve-2024-22423\ncve-2024-35666\n\u304c\u3042\u308b\u3068\u306e\u4e8b\u3002\n\nhaskell \u306e process v1.0.\u2026",
        "audience": 238,
        "audience_total": 302576,
        "total_reposts": 200,
        "post_count": 4,
        "author": "kaku_vrc",
        "username": "kaku_vrc",
        "v_score": 0.737088,
        "e_score": 0.00046,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN `INVALIDINPUT` ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-05-01 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-15T01:01:24",
        "author_id": "1018682794623434752",
        "data_id": "1779676365245300900",
        "reposts": 1,
        "post": "rt @mattn_jp: \u5148\u65e5 rust \u306e\u8106\u5f31\u6027 cve-2024-24576 \u304c\u8a71\u984c\u306b\u306a\u3063\u305f\u3051\u3069\u540c\u985e\u306e\u554f\u984c\u304c\u3042\u308b\u3068\u3057\u3066\ncve-2024-1874\ncve-2024-22423\ncve-2024-35666\n\u304c\u3042\u308b\u3068\u306e\u4e8b\u3002\n\nhaskell \u306e process v1.0.\u2026",
        "audience": 1726,
        "audience_total": 302576,
        "total_reposts": 200,
        "post_count": 4,
        "author": "\u3086\u30fc@\u8131\u529b",
        "username": "pook_tdr32",
        "v_score": 0.737088,
        "e_score": 0.00046,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN `INVALIDINPUT` ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-05-01 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-15T01:47:10",
        "author_id": "14582678",
        "data_id": "1779687879310225517",
        "reposts": 1,
        "post": "rt @mattn_jp: \u5148\u65e5 rust \u306e\u8106\u5f31\u6027 cve-2024-24576 \u304c\u8a71\u984c\u306b\u306a\u3063\u305f\u3051\u3069\u540c\u985e\u306e\u554f\u984c\u304c\u3042\u308b\u3068\u3057\u3066\ncve-2024-1874\ncve-2024-22423\ncve-2024-35666\n\u304c\u3042\u308b\u3068\u306e\u4e8b\u3002\n\nhaskell \u306e process v1.0.\u2026",
        "audience": 3132,
        "audience_total": 302576,
        "total_reposts": 200,
        "post_count": 4,
        "author": "yamamoto yuji \uff08hn: \u3059\u304c\u3059\u304cc\u8a00\u8a9e\uff09",
        "username": "igrep",
        "v_score": 0.737088,
        "e_score": 0.00046,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN `INVALIDINPUT` ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-05-01 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-15T00:54:03",
        "author_id": "1439611960392253442",
        "data_id": "1779674511920742564",
        "reposts": 1,
        "post": "rt @mattn_jp: \u5148\u65e5 rust \u306e\u8106\u5f31\u6027 cve-2024-24576 \u304c\u8a71\u984c\u306b\u306a\u3063\u305f\u3051\u3069\u540c\u985e\u306e\u554f\u984c\u304c\u3042\u308b\u3068\u3057\u3066\ncve-2024-1874\ncve-2024-22423\ncve-2024-35666\n\u304c\u3042\u308b\u3068\u306e\u4e8b\u3002\n\nhaskell \u306e process v1.0.\u2026",
        "audience": 2685,
        "audience_total": 302385,
        "total_reposts": 199,
        "post_count": 4,
        "author": "kobi",
        "username": "kobi_32768_vrc",
        "v_score": 0.737082,
        "e_score": 0.00044,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN `INVALIDINPUT` ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-04-12 02:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-15T01:02:04",
        "author_id": "60925415",
        "data_id": "1779676532757393899",
        "reposts": 1,
        "post": "rt @mattn_jp: \u5148\u65e5 rust \u306e\u8106\u5f31\u6027 cve-2024-24576 \u304c\u8a71\u984c\u306b\u306a\u3063\u305f\u3051\u3069\u540c\u985e\u306e\u554f\u984c\u304c\u3042\u308b\u3068\u3057\u3066\ncve-2024-1874\ncve-2024-22423\ncve-2024-35666\n\u304c\u3042\u308b\u3068\u306e\u4e8b\u3002\n\nhaskell \u306e process v1.0.\u2026",
        "audience": 116,
        "audience_total": 302576,
        "total_reposts": 200,
        "post_count": 4,
        "author": "takimoto",
        "username": "takimoto3",
        "v_score": 0.737088,
        "e_score": 0.00046,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN `INVALIDINPUT` ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-05-01 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-15T01:44:55",
        "author_id": "3304399760",
        "data_id": "1779687315650269471",
        "reposts": 1,
        "post": "rt @mattn_jp: \u5148\u65e5 rust \u306e\u8106\u5f31\u6027 cve-2024-24576 \u304c\u8a71\u984c\u306b\u306a\u3063\u305f\u3051\u3069\u540c\u985e\u306e\u554f\u984c\u304c\u3042\u308b\u3068\u3057\u3066\ncve-2024-1874\ncve-2024-22423\ncve-2024-35666\n\u304c\u3042\u308b\u3068\u306e\u4e8b\u3002\n\nhaskell \u306e process v1.0.\u2026",
        "audience": 70,
        "audience_total": 302576,
        "total_reposts": 200,
        "post_count": 4,
        "author": "yuu@\ud83d\udc9b\ud83c\udf19\u2693",
        "username": "yuuxzy_",
        "v_score": 0.737088,
        "e_score": 0.00046,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN `INVALIDINPUT` ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-05-01 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-15T01:53:17",
        "author_id": "103602835",
        "data_id": "1779689421845234005",
        "reposts": 1,
        "post": "rt @mattn_jp: \u5148\u65e5 rust \u306e\u8106\u5f31\u6027 cve-2024-24576 \u304c\u8a71\u984c\u306b\u306a\u3063\u305f\u3051\u3069\u540c\u985e\u306e\u554f\u984c\u304c\u3042\u308b\u3068\u3057\u3066\ncve-2024-1874\ncve-2024-22423\ncve-2024-35666\n\u304c\u3042\u308b\u3068\u306e\u4e8b\u3002\n\nhaskell \u306e process v1.0.\u2026",
        "audience": 827,
        "audience_total": 302576,
        "total_reposts": 200,
        "post_count": 4,
        "author": "mip",
        "username": "mip0007",
        "v_score": 0.737088,
        "e_score": 0.00046,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN `INVALIDINPUT` ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-05-01 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-15T03:28:49",
        "author_id": "8055732",
        "data_id": "1779713462329098642",
        "reposts": 1,
        "post": "rt @mattn_jp: \u5148\u65e5 rust \u306e\u8106\u5f31\u6027 cve-2024-24576 \u304c\u8a71\u984c\u306b\u306a\u3063\u305f\u3051\u3069\u540c\u985e\u306e\u554f\u984c\u304c\u3042\u308b\u3068\u3057\u3066\ncve-2024-1874\ncve-2024-22423\ncve-2024-35666\n\u304c\u3042\u308b\u3068\u306e\u4e8b\u3002\n\nhaskell \u306e process v1.0.\u2026",
        "audience": 1214,
        "audience_total": 302576,
        "total_reposts": 200,
        "post_count": 4,
        "author": "mitsuru shimamura",
        "username": "smbd",
        "v_score": 0.737088,
        "e_score": 0.00046,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN `INVALIDINPUT` ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-05-01 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": "https://pbs.twimg.com/profile_images/53194386/momo-logo_normal.png",
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-15T05:52:02",
        "author_id": "1256814310421958658",
        "data_id": "1779749504071442863",
        "reposts": 1,
        "post": "rt @mattn_jp: \u5148\u65e5 rust \u306e\u8106\u5f31\u6027 cve-2024-24576 \u304c\u8a71\u984c\u306b\u306a\u3063\u305f\u3051\u3069\u540c\u985e\u306e\u554f\u984c\u304c\u3042\u308b\u3068\u3057\u3066\ncve-2024-1874\ncve-2024-22423\ncve-2024-35666\n\u304c\u3042\u308b\u3068\u306e\u4e8b\u3002\n\nhaskell \u306e process v1.0.\u2026",
        "audience": 190,
        "audience_total": 302576,
        "total_reposts": 200,
        "post_count": 4,
        "author": "\u898b\u77e5\u3089\u306c\u30aa\u30bf\u30af",
        "username": "nkam444",
        "v_score": 0.737088,
        "e_score": 0.00046,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN `INVALIDINPUT` ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-05-01 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-15T05:52:26",
        "author_id": "110240050",
        "data_id": "1779749606278209652",
        "reposts": 1,
        "post": "rt @mattn_jp: \u5148\u65e5 rust \u306e\u8106\u5f31\u6027 cve-2024-24576 \u304c\u8a71\u984c\u306b\u306a\u3063\u305f\u3051\u3069\u540c\u985e\u306e\u554f\u984c\u304c\u3042\u308b\u3068\u3057\u3066\ncve-2024-1874\ncve-2024-22423\ncve-2024-35666\n\u304c\u3042\u308b\u3068\u306e\u4e8b\u3002\n\nhaskell \u306e process v1.0.\u2026",
        "audience": 7785,
        "audience_total": 302576,
        "total_reposts": 200,
        "post_count": 4,
        "author": "\uff1e\u03c9\uff1c",
        "username": "u_akihiro",
        "v_score": 0.737088,
        "e_score": 0.00046,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN `INVALIDINPUT` ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-05-01 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-15T09:42:18",
        "author_id": "881029319388127232",
        "data_id": "1779807450985828379",
        "reposts": 1,
        "post": "rt @mattn_jp: \u5148\u65e5 rust \u306e\u8106\u5f31\u6027 cve-2024-24576 \u304c\u8a71\u984c\u306b\u306a\u3063\u305f\u3051\u3069\u540c\u985e\u306e\u554f\u984c\u304c\u3042\u308b\u3068\u3057\u3066\ncve-2024-1874\ncve-2024-22423\ncve-2024-35666\n\u304c\u3042\u308b\u3068\u306e\u4e8b\u3002\n\nhaskell \u306e process v1.0.\u2026",
        "audience": 2890,
        "audience_total": 302576,
        "total_reposts": 200,
        "post_count": 4,
        "author": "\u307e\u3050\u306b\u3042\ud83d\udcbe",
        "username": "magnianeko",
        "v_score": 0.737088,
        "e_score": 0.00046,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN `INVALIDINPUT` ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-05-01 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-15T09:44:37",
        "author_id": "7588542",
        "data_id": "1779808035210498522",
        "reposts": 1,
        "post": "rt @mattn_jp: \u5148\u65e5 rust \u306e\u8106\u5f31\u6027 cve-2024-24576 \u304c\u8a71\u984c\u306b\u306a\u3063\u305f\u3051\u3069\u540c\u985e\u306e\u554f\u984c\u304c\u3042\u308b\u3068\u3057\u3066\ncve-2024-1874\ncve-2024-22423\ncve-2024-35666\n\u304c\u3042\u308b\u3068\u306e\u4e8b\u3002\n\nhaskell \u306e process v1.0.\u2026",
        "audience": 1806,
        "audience_total": 302576,
        "total_reposts": 200,
        "post_count": 4,
        "author": "\u3079\u308c\u91ce",
        "username": "veleno_jp",
        "v_score": 0.737088,
        "e_score": 0.00046,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN `INVALIDINPUT` ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-05-01 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-15T11:24:59",
        "author_id": "1599967240048496640",
        "data_id": "1779833292369568069",
        "reposts": 1,
        "post": "rt @mattn_jp: \u5148\u65e5 rust \u306e\u8106\u5f31\u6027 cve-2024-24576 \u304c\u8a71\u984c\u306b\u306a\u3063\u305f\u3051\u3069\u540c\u985e\u306e\u554f\u984c\u304c\u3042\u308b\u3068\u3057\u3066\ncve-2024-1874\ncve-2024-22423\ncve-2024-35666\n\u304c\u3042\u308b\u3068\u306e\u4e8b\u3002\n\nhaskell \u306e process v1.0.\u2026",
        "audience": 1220,
        "audience_total": 302576,
        "total_reposts": 200,
        "post_count": 4,
        "author": "salmonia3+\u958b\u767a\u60c5\u5831",
        "username": "salmonia3dev",
        "v_score": 0.737088,
        "e_score": 0.00046,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN `INVALIDINPUT` ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-05-01 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-15T10:36:09",
        "author_id": "15105682",
        "data_id": "1779821004078076358",
        "reposts": 1,
        "post": "rt @mattn_jp: \u5148\u65e5 rust \u306e\u8106\u5f31\u6027 cve-2024-24576 \u304c\u8a71\u984c\u306b\u306a\u3063\u305f\u3051\u3069\u540c\u985e\u306e\u554f\u984c\u304c\u3042\u308b\u3068\u3057\u3066\ncve-2024-1874\ncve-2024-22423\ncve-2024-35666\n\u304c\u3042\u308b\u3068\u306e\u4e8b\u3002\n\nhaskell \u306e process v1.0.\u2026",
        "audience": 39,
        "audience_total": 302576,
        "total_reposts": 200,
        "post_count": 4,
        "author": "page",
        "username": "pack_age",
        "v_score": 0.737088,
        "e_score": 0.00046,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN `INVALIDINPUT` ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-05-01 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-15T11:26:09",
        "author_id": "21370983",
        "data_id": "1779833588541952088",
        "reposts": 1,
        "post": "rt @mattn_jp: \u5148\u65e5 rust \u306e\u8106\u5f31\u6027 cve-2024-24576 \u304c\u8a71\u984c\u306b\u306a\u3063\u305f\u3051\u3069\u540c\u985e\u306e\u554f\u984c\u304c\u3042\u308b\u3068\u3057\u3066\ncve-2024-1874\ncve-2024-22423\ncve-2024-35666\n\u304c\u3042\u308b\u3068\u306e\u4e8b\u3002\n\nhaskell \u306e process v1.0.\u2026",
        "audience": 1399,
        "audience_total": 302576,
        "total_reposts": 200,
        "post_count": 4,
        "author": "ysaito",
        "username": "ysaito8015",
        "v_score": 0.737088,
        "e_score": 0.00046,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN `INVALIDINPUT` ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-05-01 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-15T16:06:45",
        "author_id": "5394062",
        "data_id": "1779904202241937809",
        "reposts": 1,
        "post": "rt @mattn_jp: \u5148\u65e5 rust \u306e\u8106\u5f31\u6027 cve-2024-24576 \u304c\u8a71\u984c\u306b\u306a\u3063\u305f\u3051\u3069\u540c\u985e\u306e\u554f\u984c\u304c\u3042\u308b\u3068\u3057\u3066\ncve-2024-1874\ncve-2024-22423\ncve-2024-35666\n\u304c\u3042\u308b\u3068\u306e\u4e8b\u3002\n\nhaskell \u306e process v1.0.\u2026",
        "audience": 1797,
        "audience_total": 302576,
        "total_reposts": 200,
        "post_count": 4,
        "author": "vuking\ud835\udd4fvine\ud835\udd4fp \u300c\ud835\udd4f\u300d",
        "username": "vuking",
        "v_score": 0.737088,
        "e_score": 0.00046,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN `INVALIDINPUT` ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-05-01 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-15T16:10:25",
        "author_id": "15115405",
        "data_id": "1779905126221988036",
        "reposts": 1,
        "post": "rt @mattn_jp: \u5148\u65e5 rust \u306e\u8106\u5f31\u6027 cve-2024-24576 \u304c\u8a71\u984c\u306b\u306a\u3063\u305f\u3051\u3069\u540c\u985e\u306e\u554f\u984c\u304c\u3042\u308b\u3068\u3057\u3066\ncve-2024-1874\ncve-2024-22423\ncve-2024-35666\n\u304c\u3042\u308b\u3068\u306e\u4e8b\u3002\n\nhaskell \u306e process v1.0.\u2026",
        "audience": 284,
        "audience_total": 302576,
        "total_reposts": 200,
        "post_count": 4,
        "author": "\u30d2\u529b\uff89\uff9a(cv:\u5b89\u7396\u6df1\u97f3).xp3",
        "username": "hikaru613",
        "v_score": 0.737088,
        "e_score": 0.00046,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN `INVALIDINPUT` ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-05-01 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-15T22:28:59",
        "author_id": "1022922114783952897",
        "data_id": "1780000392450822211",
        "reposts": 0,
        "post": "rust: cve-2024-24576 (\u0642\u0628\u0644 \u0667 \u0623\u064a\u0627\u0645)\nhttps://t.co/h2iwcbozsj\n\nnode js: cve-2024-27980 (\u0642\u0628\u0644 \u0666 \u0623\u064a\u0627\u0645)\nhttps://t.co/ih8j6fhxy2\n\nphp: cve-2024-1874 (\u0642\u0628\u0644 \u0664 \u0623\u064a\u0627\u0645)\nhttps://t.co/toucsbnmn5\n\n\u0643\u0644\u0647\u0645 \u0628\u0646\u0641\u0633 \u0627\u0644\u0641\u0643\u0631\u0629 \ud83d\ude05 https://t.co/fmppjnfv9c",
        "audience": 9097,
        "audience_total": 302576,
        "total_reposts": 200,
        "post_count": 4,
        "author": "mohammed \ud83c\uddf8\ud83c\udde6",
        "username": "u0pattern",
        "v_score": 0.737088,
        "e_score": 0.00046,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN `INVALIDINPUT` ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-05-01 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": "https://pbs.twimg.com/profile_images/1656540258509504514/5tiJHtvQ_normal.jpg",
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-04-19T22:22:18",
        "author_id": "864971950178938884",
        "data_id": "1781448262840352878",
        "reposts": 1,
        "post": "rt @cvenew: cve-2024-24576 rust is a programming language. the rust security response wg was notified that the rust standard library prior\u2026",
        "audience": 2,
        "audience_total": 302576,
        "total_reposts": 200,
        "post_count": 4,
        "author": "patricio ascencio",
        "username": "pascencioa",
        "v_score": 0.737088,
        "e_score": 0.00046,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN `INVALIDINPUT` ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-05-01 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2024-24576",
        "created_datetime": "2024-05-02T20:20:29",
        "author_id": "3243601502",
        "data_id": "1786128652071039444",
        "reposts": 1,
        "post": "rt @vicariusltd: a rusty nail could lead to many problems, but none as severe as this command injection vulnerability (cve-2024-24576) in t\u2026",
        "audience": 191,
        "audience_total": 302576,
        "total_reposts": 200,
        "post_count": 4,
        "author": "michael assraf",
        "username": "michaelassraf",
        "v_score": 0.737088,
        "e_score": 0.00046,
        "base_score": "10",
        "description": "RUST IS A PROGRAMMING LANGUAGE. THE RUST SECURITY RESPONSE WG WAS NOTIFIED THAT THE RUST STANDARD LIBRARY PRIOR TO VERSION 1.77.2 DID NOT PROPERLY ESCAPE ARGUMENTS WHEN INVOKING BATCH FILES (WITH THE `BAT` AND `CMD` EXTENSIONS) ON WINDOWS USING THE `COMMAND`. AN ATTACKER ABLE TO CONTROL THE ARGUMENTS PASSED TO THE SPAWNED PROCESS COULD EXECUTE ARBITRARY SHELL COMMANDS BY BYPASSING THE ESCAPING. THE SEVERITY OF THIS VULNERABILITY IS CRITICAL FOR THOSE WHO INVOKE BATCH FILES ON WINDOWS WITH UNTRUSTED ARGUMENTS. NO OTHER PLATFORM OR USE IS AFFECTED.\n\nTHE `COMMAND::ARG` AND `COMMAND::ARGS` APIS STATE IN THEIR DOCUMENTATION THAT THE ARGUMENTS WILL BE PASSED TO THE SPAWNED PROCESS AS-IS, REGARDLESS OF THE CONTENT OF THE ARGUMENTS, AND WILL NOT BE EVALUATED BY A SHELL. THIS MEANS IT SHOULD BE SAFE TO PASS UNTRUSTED INPUT AS AN ARGUMENT.\n\nON WINDOWS, THE IMPLEMENTATION OF THIS IS MORE COMPLEX THAN OTHER PLATFORMS, BECAUSE THE WINDOWS API ONLY PROVIDES A SINGLE STRING CONTAINING ALL THE ARGUMENTS TO THE SPAWNED PROCESS, AND ITS UP TO THE SPAWNED PROCESS TO SPLIT THEM. MOST PROGRAMS USE THE STANDARD C RUN-TIME ARGV, WHICH IN PRACTICE RESULTS IN A MOSTLY CONSISTENT WAY ARGUMENTS ARE SPLITTED.\n\nONE EXCEPTION THOUGH IS `CMD.EXE` (USED AMONG OTHER THINGS TO EXECUTE BATCH FILES), WHICH HAS ITS OWN ARGUMENT SPLITTING LOGIC. THAT FORCES THE STANDARD LIBRARY TO IMPLEMENT CUSTOM ESCAPING FOR ARGUMENTS PASSED TO BATCH FILES. UNFORTUNATELY IT WAS REPORTED THAT OUR ESCAPING LOGIC WAS NOT THOROUGH ENOUGH, AND IT WAS POSSIBLE TO PASS MALICIOUS ARGUMENTS THAT WOULD RESULT IN ARBITRARY SHELL EXECUTION.\n\nDUE TO THE COMPLEXITY OF `CMD.EXE`, WE DIDNT IDENTIFY A SOLUTION THAT WOULD CORRECTLY ESCAPE ARGUMENTS IN ALL CASES. TO MAINTAIN OUR API GUARANTEES, WE IMPROVED THE ROBUSTNESS OF THE ESCAPING CODE, AND CHANGED THE `COMMAND` API TO RETURN AN `INVALIDINPUT` ERROR WHEN IT CANNOT SAFELY ESCAPE AN ARGUMENT. THIS ERROR WILL BE EMITTED WHEN SPAWNING THE PROCESS.\n\nTHE FIX IS INCLUDED IN RUST 1.77.2. NOTE THAT THE NEW ESCAPING LOGIC FOR BATCH FILES ERRS ON THE CONSERVATIVE SIDE, AND COULD REJECT VALID ARGUMENTS. THOSE WHO IMPLEMENT THE ESCAPING THEMSELVES OR ONLY HANDLE TRUSTED INPUTS ON WINDOWS CAN ALSO USE THE `COMMANDEXT::RAW_ARG` METHOD TO BYPASS THE STANDARD LIBRARYS ESCAPING LOGIC.",
        "last_modified_datetime": "2024-05-01 18:15:00",
        "published_datetime": "2024-04-09 18:15:00",
        "vendor_logo": null,
        "profile_url": null,
        "feed_name": "twitter"
    }
]